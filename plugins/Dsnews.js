const { cmd , commands} = require('../command'); // ‡∂î‡∂∂‡∂ú‡∑ö command system ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∂±‡∑î‡∑Ä
const axios = require('axios'); // HTTP requests ‡∑É‡∂≥‡∑Ñ‡∑è

// ‡∂î‡∂∂‡∂ú‡∑ö‡∂∏ News API ‡∑Ñ‡∑í URL ‡∂ë‡∂ö ‡∂∏‡∑ô‡∑Ñ‡∑í ‡∑É‡∂≥‡∑Ñ‡∂±‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
// ‡∂∏‡∑ô‡∂∫ ‡∂î‡∂∂ Render.com ‡∑Ñ‡∑í deploy ‡∂ö‡∑Ö API ‡∂ë‡∂ö‡∂∫‡∑í.
const ESANA_NEWS_API_URL = "https://news-api-bv26.onrender.com/api/news"; 

cmd({
    pattern: "news",
    react: "üì∞",
    alias: ["sinhala_news", "lanka_news"],
    desc: "‡∂±‡∑Ä‡∂≠‡∂∏ ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä (Esana.lk ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä) ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±.",
    category: "main",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
    try {
        // API ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
        const response = await axios.get(ESANA_NEWS_API_URL);
        const articles = response.data; // API ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂ö‡∑ô‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ articles array ‡∂ë‡∂ö ‡∂ë‡∂±‡∑Ä‡∑è

        if (!articles || articles.length === 0) {
            return reply("‡∂ö‡∂´‡∂ú‡∑è‡∂ß‡∑î‡∂∫‡∑í, ‡∂Ø‡∑ê‡∂±‡∂ß ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ß‡∑í‡∂ö ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä‡∂ö‡∑í‡∂±‡∑ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }

        let newsMessage = "*‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä‡∂∏ ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä (Esana.lk ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä) :*\n\n";

        // ‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä 3‡∂ö‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß
        for (let i = 0; i < Math.min(articles.length, 3); i++) {
            const article = articles[i];
            newsMessage += `*${i + 1}. ${article.title || '‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä‡∂ö‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠'}*\n`;
            newsMessage += `   _${article.description || '‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫‡∂ö‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠'}_\n`;
            newsMessage += `   ‡∂ö‡∑í‡∂∫‡∑Ä‡∂±‡∑ä‡∂±: ${article.url}\n\n`;
        }

        await conn.sendMessage(from, { text: newsMessage }, { quoted: mek });

    } catch (e) {
        console.error("‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:", e);
        // API request ‡∂ë‡∂ö‡∑ö error ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ü‡∑Ä‡∑ú‡∂≠‡∑ä, ‡∂í‡∂ö‡∑ô‡∂±‡∑ä ‡∂ö‡∑í‡∂∫‡∑Ä‡∑ô‡∂± ‡∂Ø‡∑ö user ‡∂ß ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í
        if (e.response) {
            reply(`‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑í‡∂∫: API ‡∂Ø‡∑ù‡∑Ç‡∂∫ - ${e.response.status} ${e.response.statusText}`);
        } else if (e.request) {
            reply(`‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑í‡∂∫: API ‡∑Ä‡∑ô‡∂≠ ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏‡∑ö ‡∂ú‡∑ê‡∂ß‡∂Ω‡∑î‡∑Ä‡∂ö‡∑ä.`);
        } else {
            reply(`‡∂¥‡∑î‡∑Ä‡∂≠‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑í‡∂∫: ${e.message}`);
        }
    }
});
