// ‡∂∏‡∑ô‡∂∏ ‡∂¥‡∑ä‡∂Ω‡∂ú‡∑í‡∂±‡∂∫ WhatsApp Bot ‡∑Ä‡∑í‡∂∞‡∑è‡∂± ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∑Ä‡∑ö.
// This plugin is used for WhatsApp Bot commands.
const { cmd } = require('../command');
const fs = require('fs'); // ‡∂ú‡∑ú‡∂±‡∑î ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í‡∂∫ ‡∑É‡∂∏‡∂ü ‡∑Ä‡∑ê‡∂© ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß fs ‡∂∏‡∑ú‡∂©‡∑í‡∂∫‡∑î‡∂Ω‡∂∫ ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∑Ä‡∑ö.
const path = require('path'); // ‡∂ú‡∑ú‡∂±‡∑î ‡∂∏‡∑è‡∂ª‡∑ä‡∂ú ‡∑É‡∂∏‡∂ü ‡∑Ä‡∑ê‡∂© ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß path ‡∂∏‡∑ú‡∂©‡∑í‡∂∫‡∑î‡∂Ω‡∂∫ ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∑Ä‡∑ö.

// ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß Map ‡∂ë‡∂ö‡∂ö‡∑ä.
// A Map to store information for groups where the quiz game is active.
const activeQuizzes = new Map(); // Map<groupId, { intervalId: NodeJS.Timeout, currentQuestion: object }>

// ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∑ô‡∂±‡∑ä ‡∂ö‡∑í‡∂∫‡∑Ä‡∂±‡∑ä‡∂±.
// Read question data from the file.
let questionsData = [];
try {
    // __dirname ‡∂∫‡∂±‡∑î ‡∑Ä‡∂≠‡∑ä‡∂∏‡∂±‡∑ä ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∑ö ‡∂±‡∑è‡∂∏‡∑è‡∑Ä‡∂Ω‡∑í‡∂∫‡∂∫‡∑í (plugins ‡∑Ü‡∑ù‡∂Ω‡∑ä‡∂©‡∂ª‡∂∫).
    // data ‡∑Ü‡∑ù‡∂Ω‡∑ä‡∂©‡∂ª‡∂∫ plugins ‡∑Ü‡∑ù‡∂Ω‡∑ä‡∂©‡∂ª‡∂∫‡∂ß ‡∂ë‡∂ö ‡∂∏‡∂ß‡∑ä‡∂ß‡∂∏‡∂ö‡∑ä ‡∂â‡∑Ñ‡∑Ö‡∑í‡∂±‡∑ä ‡∂¥‡∑í‡∑Ñ‡∑í‡∂ß‡∑è ‡∂á‡∂≠.
    // __dirname is the directory of the current file (plugins folder).
    // The data folder is located one level above the plugins folder.
    const questionsFilePath = path.join(__dirname, '../data', 'quiz_questions.json');
    const rawData = fs.readFileSync(questionsFilePath, 'utf8');
    questionsData = JSON.parse(rawData);
    console.log("‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂¥‡∑ñ‡∂ª‡∂´‡∂∫ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì."); // Log successful loading.
} catch (error) {
    console.error("‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂¥‡∑ñ‡∂ª‡∂´‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:", error); // Log error during loading.
    // ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂¥‡∑ñ‡∂ª‡∂´‡∂∫ ‡∂±‡∑ú‡∑Ä‡∂±‡∑ä‡∂±‡∑ö ‡∂±‡∂∏‡∑ä, ‡∂¥‡∑ô‡∂ª‡∂±‡∑í‡∂∏‡∑í ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑Ñ‡∑ù ‡∑Ñ‡∑í‡∑É‡∑ä ‡∂Ö‡∂ª‡∑è‡∑Ä‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
    // If data fails to load, use default data or an empty array.
    questionsData = [];
}

/**
 * ‡∂Ö‡∑Ñ‡∂π‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∑è ‡∂ú‡∂±‡∑ì.
 * Selects a random question from the questionsData array.
 * @returns {object|null} ‡∂Ö‡∑Ñ‡∂π‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑É‡∑ä‡∂≠‡∑î‡∑Ä ‡∑Ñ‡∑ù ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í ‡∂±‡∂∏‡∑ä null.
 */
function getRandomQuestion() {
    if (questionsData.length === 0) {
        console.warn("‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        return null;
    }
    return questionsData[Math.floor(Math.random() * questionsData.length)];
}

/**
 * ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑É‡∑ä‡∂≠‡∑î‡∑Ä‡∂ö‡∑ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∑Ñ‡∑ê‡∂©‡∂ú‡∂±‡∑ä‡∑Ä‡∂∫‡∑í.
 * Formats a question object into a message string.
 * @param {object} questionObj - ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑É‡∑ä‡∂≠‡∑î‡∑Ä.
 * @returns {string} ‡∑Ñ‡∑ê‡∂©‡∂ú‡∑ê‡∂±‡∑ä‡∑Ä‡∑ñ ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫.
 */
function formatQuestion(questionObj) {
    if (!questionObj) {
        return "‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
    }
    let message = `*‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫:* ${questionObj.question}\n\n*‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥:*\n`;
    questionObj.options.forEach((option, index) => {
        message += `${String.fromCharCode(65 + index)}. ${option}\n`; // ‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥ A, B, C, D ‡∂Ω‡∑ô‡∑É ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í.
    });
    message += `\n_‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±!_‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª type ‡∂ö‡∂ª ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±.`;
               `\n*·¥©·¥è·¥°·¥á Ä·¥á·¥Ö  ô è q·¥ú·¥á·¥á…¥-Íú±·¥Ä·¥Ö·¥ú-·¥ÄÍú±·¥õ Ä·¥è*`;
               `\n*·¥ç Ä·¥Ö ·¥Ä…™*`;
    return message;
}

// startmrdai ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫: ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂∫‡∑í.
// startmrdai command: Starts the quiz game.
cmd({
    pattern: "startmrdai",
    react: "üöÄ", // ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂± emoji.
    alias: ["quizstart"],
    desc: "‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. ‡∑É‡∑ë‡∂∏ ‡∂¥‡∑ê‡∂∫‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä ‡∂±‡∑Ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö.", // ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫.
    category: "game",
    filename: __filename
},
async (conn, mek, m, { from }) => {
    try {
        if (questionsData.length === 0) {
            return await conn.sendMessage(from, { text: '‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂¥‡∑ñ‡∂ª‡∂´‡∂∫ ‡∑Ä‡∑ì ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.' }, { quoted: mek });
        }

        // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
        // Check if the quiz is already active for this group.
        if (activeQuizzes.has(from)) {
            return await conn.sendMessage(from, { text: '‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö‡∂∫‡∑í.' }, { quoted: mek });
        }

        // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∑è‡∂ú‡∑ô‡∂± ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∂ß ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠‡∂∫.
        // Function to select and send a question to the group.
        const sendQuestion = async () => {
            const question = getRandomQuestion();
            const questionMessage = formatQuestion(question);
            await conn.sendMessage(from, { text: questionMessage });

            // ‡∑Ä‡∂≠‡∑ä‡∂∏‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂± (‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ö‡∂±‡∑è‡∂ú‡∂≠‡∂∫‡∑ö‡∂Ø‡∑ì ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö).
            // Store the current question (can be used for answer checking in the future).
            if (activeQuizzes.has(from)) { // Ensure the quiz is still active before updating
                activeQuizzes.get(from).currentQuestion = question;
            }
        };

        // ‡∂¥‡∑Ö‡∂∏‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∑Ä‡∑Ñ‡∑è‡∂∏ ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±.
        // Send the first question immediately.
        await sendQuestion();

        // ‡∑É‡∑ë‡∂∏ ‡∂¥‡∑ê‡∂∫‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß interval ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑É‡∂ö‡∑É‡∂±‡∑ä‡∂±. (1 hour = 60 minutes * 60 seconds * 1000 milliseconds)
        // Set an interval to send questions every hour.
        const intervalId = setInterval(sendQuestion, 60 * 60 * 1000); // 1 hour

        // ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è Map ‡∂ë‡∂ö‡∂ß ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
        // Add the active quiz to the map.
        activeQuizzes.set(from, { intervalId: intervalId, currentQuestion: null });

        await conn.sendMessage(from, { text: '‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑í‡∂∫! ‡∑É‡∑ë‡∂∏ ‡∂¥‡∑ê‡∂∫‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä ‡∂±‡∑Ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö.' }, { quoted: mek });

    } catch (error) {
        console.error("startmrdai ‡∑Ñ‡∑í ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:", error); // Log the error.
        await conn.sendMessage(from, { text: '‡∂ö‡∂´‡∂ú‡∑è‡∂ß‡∑î‡∂∫‡∑í, ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫.' }, { quoted: mek });
    }
});

// stopmrdai ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫: ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂∫‡∑í.
// stopmrdai command: Stops the quiz game.
cmd({
    pattern: "stopmrdai",
    react: "üõë", // ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂± emoji.
    alias: ["quizstop"],
    desc: "‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂±‡∑ä‡∂±.", // ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫.
    category: "game",
    filename: __filename
},
async (conn, mek, m, { from }) => {
    try {
        // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂±‡∑ú‡∑Ä‡∑ö‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
        // Check if the quiz is not active for this group.
        if (!activeQuizzes.has(from)) {
            return await conn.sendMessage(from, { text: '‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂±‡∑ú‡∑Ä‡∑ö.' }, { quoted: mek });
        }

        // interval ‡∂ë‡∂ö ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂±‡∑ä‡∂±.
        // Clear the interval.
        clearInterval(activeQuizzes.get(from).intervalId);
        // Map ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂Ö‡∂Ø‡∑è‡∑Ö ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏ ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
        // Remove the group from the active quizzes map.
        activeQuizzes.delete(from);

        await conn.sendMessage(from, { text: '‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂±‡∂≠‡∂ª ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.' }, { quoted: mek });

    } catch (error) {
        console.error("stopmrdai ‡∑Ñ‡∑í ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:", error); // Log the error.
        await conn.sendMessage(from, { text: '‡∂ö‡∂´‡∂ú‡∑è‡∂ß‡∑î‡∂∫‡∑í, ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∑Ä‡∑í‡∂†‡∑è‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä ‡∂±‡∑ê‡∑Ä‡∑ê‡∂≠‡∑ä‡∑Ä‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫.' }, { quoted: mek });
    }
});

// getmrdai ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫: ‡∂Ö‡∑Ñ‡∂π‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂∫‡∑í.
// getmrdai command: Gets a random question.
cmd({
    pattern: "getmrdai",
    react: "‚ùì", // ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂± emoji.
    alias: ["getquiz"],
    desc: "‡∂Ö‡∑Ñ‡∂π‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±.", // ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫.
    category: "game",
    filename: __filename
},
async (conn, mek, m, { from }) => {
    try {
        if (questionsData.length === 0) {
            return await conn.sendMessage(from, { text: '‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂¥‡∑ñ‡∂ª‡∂´‡∂∫ ‡∑Ä‡∑ì ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.' }, { quoted: mek });
        }
        // ‡∂Ö‡∑Ñ‡∂π‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∑è‡∂ú‡∑ô‡∂± ‡∂ë‡∂∫ ‡∑Ñ‡∑ê‡∂©‡∂ú‡∂±‡∑ä‡∑Ä‡∂±‡∑ä‡∂±.
        // Select a random question and format it.
        const question = getRandomQuestion();
        const questionMessage = formatQuestion(question);
        await conn.sendMessage(from, { text: questionMessage }, { quoted: mek });

    } catch (error) {
        console.error("getmrdai ‡∑Ñ‡∑í ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:", error); // Log the error.
        await conn.sendMessage(from, { text: '‡∂ö‡∂´‡∂ú‡∑è‡∂ß‡∑î‡∂∫‡∑í, ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫.' }, { quoted: mek });
    }
});
