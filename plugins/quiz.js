const { cmd } = require('../command');
const fs = require('fs');
const path = require('path');

// Quiz questions JSON file ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
const QUIZ_QUESTIONS_FILE = path.join(__dirname, '../data/quiz_questions.json'); 
let quizQuestions = [];
try {
    quizQuestions = JSON.parse(fs.readFileSync(QUIZ_QUESTIONS_FILE, 'utf8'));
    if (quizQuestions.length === 0) {
        console.warn("quiz_questions.json is empty or contains no valid questions.");
    }
} catch (error) {
    console.error(`Error loading quiz_questions.json from ${QUIZ_QUESTIONS_FILE}:`, error.message);
    quizQuestions = []; 
}

// Quiz ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± group JID ‡∂ë‡∂ö ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß
const QUIZ_STATE_FILE = path.join(__dirname, '../data/quiz_state.json'); 
let quizEnabledGroupJid = null;
let quizIntervalId = null;
let currentQuizQuestionIndex = -1; 
let activeQuizMessageId = null; // Poll message ‡∂ë‡∂ö‡∑ö ID ‡∂ë‡∂ö ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß
let quizScore = {}; // { participantJid: score }

// Bot start ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß, ‡∂ö‡∂Ω‡∑í‡∂±‡∑ä ‡∂≠‡∑í‡∂∂‡∑ñ state ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
function loadQuizState() {
    try {
        if (fs.existsSync(QUIZ_STATE_FILE)) {
            const state = JSON.parse(fs.readFileSync(QUIZ_STATE_FILE, 'utf8'));
            if (state && state.groupJid) {
                quizEnabledGroupJid = state.groupJid;
                console.log(`Loaded quiz state: Quiz enabled for JID ${quizEnabledGroupJid}`);
            }
        }
    } catch (error) {
        console.error("Error loading quiz_state.json:", error);
    }
}

// Quiz state ‡∂ë‡∂ö save ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
function saveQuizState() {
    try {
        const dataDir = path.dirname(QUIZ_STATE_FILE);
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
        }
        const state = { groupJid: quizEnabledGroupJid };
        fs.writeFileSync(QUIZ_STATE_FILE, JSON.stringify(state, null, 2), 'utf8'); 
        console.log(`Quiz state saved for JID: ${quizEnabledGroupJid}`);
    } catch (error) {
        console.error("Error saving quiz_state.json:", error);
    }
}

// Quiz Interval ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö function ‡∂ë‡∂ö
function startQuizInterval(conn, jid) {
    if (quizIntervalId) {
        clearInterval(quizIntervalId); 
        console.log(`Cleared existing quiz interval for ${jid}`);
    }
    quizIntervalId = setInterval(async () => {
        if (global.currentConn && quizEnabledGroupJid) {
            await sendQuizQuestion(global.currentConn, quizEnabledGroupJid);
        } else {
            console.warn("Global connection object (global.currentConn) not found or quiz not enabled for any group to send next question.");
            if (quizIntervalId && !quizEnabledGroupJid) {
                clearInterval(quizIntervalId);
                quizIntervalId = null;
                console.log("Quiz interval stopped due to no active quiz group.");
            }
        }
    }, 60 * 60 * 1000); // 1 hour (60 minutes * 60 seconds * 1000 milliseconds)
    console.log(`Quiz interval started for ${jid}`);
}

// Bot start ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß state ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
loadQuizState();

// --- Quiz Commands ---

// ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä Poll ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∂± function ‡∂ë‡∂ö
async function sendQuizQuestion(conn, jid) {
    if (quizQuestions.length === 0) {
        await conn.sendMessage(jid, { text: "‡∂∏‡∂ß ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª quiz_questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∑É‡∂ö‡∑É‡∑è ‡∂á‡∂≠‡∑í ‡∂∂‡∑Ä‡∂ß ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±." });
        return false; 
    }

    currentQuizQuestionIndex = Math.floor(Math.random() * quizQuestions.length);
    const questionData = quizQuestions[currentQuizQuestionIndex];

    const pollOptions = questionData.options.map(option => ({ optionName: option }));

    const pollMessage = {
        poll: {
            name: questionData.question,
            values: pollOptions,
            selectableOptionsCount: 1 // ‡∂ë‡∂ö‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∂ö‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂â‡∂© ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±
        }
    };

    const sentMsg = await conn.sendMessage(jid, pollMessage);
    activeQuizMessageId = sentMsg.key.id; // ‡∂∫‡∑Ä‡∂± ‡∂Ω‡∂Ø poll message ‡∂ë‡∂ö‡∑ö ID ‡∂ë‡∂ö ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    quizScore = {}; // ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂ë‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß score reset ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    console.log(`Sent quiz question (Poll) to ${jid}. Question index: ${currentQuizQuestionIndex}, Message ID: ${activeQuizMessageId}`);
    return true; 
}


// .startmrdai Command (‡∂¥‡∑ê‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑ê‡∂∫‡∂ß Quiz ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß)
cmd({
    pattern: "startmrdai",
    react: "‚úÖ",
    desc: "Start MR D AI quiz in this group (hourly).",
    category: "quiz",
    use: '.startmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply, isOwner, groupMetadata}) => {
    global.currentConn = conn;

    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    if (!isOwner) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö Bot Owner ‡∂ß ‡∂¥‡∂∏‡∂´‡∑í!*");

    if (quizEnabledGroupJid === from) {
        return reply("‚úÖ *Quiz ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∏‡∑ô‡∂∏ Group ‡∂ë‡∂ö‡∑ö ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∂∫‡∑í!*");
    }

    quizEnabledGroupJid = from;
    saveQuizState(); 

    reply(`‚úÖ *MR D AI Quiz ‡∂ë‡∂ö "${groupMetadata.subject}" Group ‡∂ë‡∂ö‡∑ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì. ‡∑É‡∑ë‡∂∏ ‡∂¥‡∑ê‡∂∫‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂ë‡∑Ä‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö.*`);
    
    // ‡∑Ä‡∑Ñ‡∑è‡∂∏ ‡∂¥‡∑Ö‡∂∏‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±, ‡∂¥‡∑É‡∑î‡∑Ä interval ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    await sendQuizQuestion(conn, from);
    startQuizInterval(conn, from); 
});


// .stopmrdai Command (Quiz ‡∂ë‡∂ö ‡∂±‡∑ê‡∑Ä‡∑ê‡∂≠‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß)
cmd({
    pattern: "stopmrdai",
    react: "‚ùå",
    desc: "Stop MR D AI quiz in this group.",
    category: "quiz",
    use: '.stopmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply, isOwner}) => {
    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    if (!isOwner) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö Bot Owner ‡∂ß ‡∂¥‡∂∏‡∂´‡∑í!*");

    if (quizEnabledGroupJid !== from) {
        return reply("‚ùå *Quiz ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∏‡∑ô‡∂∏ Group ‡∂ë‡∂ö‡∑ö ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂±‡∑ê‡∂≠!*");
    }

    if (quizIntervalId) {
        clearInterval(quizIntervalId);
        quizIntervalId = null;
    }
    quizEnabledGroupJid = null;
    activeQuizMessageId = null; // Stop ‡∂ö‡∂ª‡∂± ‡∑Ä‡∑í‡∂ß active quiz message ‡∂ë‡∂ö‡∂≠‡∑ä remove ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    quizScore = {}; // Stop ‡∂ö‡∂ª‡∂± ‡∑Ä‡∑í‡∂ß score reset ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    saveQuizState(); 

    reply("üõë *MR D AI Quiz ‡∂ë‡∂ö ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ì.*");
});

// .getmrdai Command (‡∂ë‡∑É‡∑ê‡∂´‡∑í‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß)
cmd({
    pattern: "getmrdai",
    react: "üí°",
    desc: "Get a new MR D AI quiz question instantly.",
    category: "quiz",
    use: '.getmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply}) => {
    global.currentConn = conn;

    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    
    const sent = await sendQuizQuestion(conn, from);
    if (!sent) {
        reply("üòî *‡∂Ø‡∑ê‡∂±‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.* ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª quiz_questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
    }
});

// --- Poll Vote Handling Function (‡∂∏‡∑ô‡∂∫ index.js ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä ‡∂ö‡∑ê‡∂≥‡∑Ä‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö) ---
async function handlePollVote(conn, update) {
    if (!quizEnabledGroupJid || !activeQuizMessageId || currentQuizQuestionIndex === -1) {
        // Quiz active ‡∂±‡∑ê‡∂≠‡∑í‡∂±‡∂∏‡∑ä ‡∑Ñ‡∑ù ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂∫‡∑Ä‡∑è ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í ‡∂±‡∂∏‡∑ä ignore ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
        return;
    }

    // ‡∂Ö‡∂Ø‡∑è‡∑Ö group ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∑É‡∑Ñ message ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    if (update.pollUpdates[0] && update.pollUpdates[0].pollId === activeQuizMessageId && update.id === quizEnabledGroupJid) {
        const pollUpdate = update.pollUpdates[0];
        const voterJid = pollUpdate.voter; // ‡≤Æ‡≤§‡∂∫ ‡∂Ø‡∑î‡∂±‡∑ä ‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∂∫‡∑è‡∂ú‡∑ö JID ‡∂ë‡∂ö
        const selectedOptions = pollUpdate.selectedOptions; // ‡∂≠‡∑ù‡∂ª‡∑è‡∂ú‡∂≠‡∑ä options

        if (selectedOptions.length === 0) {
            // ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∂ö‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑Ö‡∑è ‡∂±‡∂∏‡∑ä (unvote)
            return;
        }

        // ‡∂≠‡∑ù‡∂ª‡∑è‡∂ú‡∂≠‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑ö index ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ (‡∂¥‡∑Ö‡∂∏‡∑î option ‡∂ë‡∂ö ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∑É‡∂Ω‡∂ö‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö)
        const selectedOptionBuffer = selectedOptions[0];
        const selectedOption = Buffer.from(selectedOptionBuffer).toString('utf8');

        const questionData = quizQuestions[currentQuizQuestionIndex];
        let userAnswerIndex = -1;
        // ‡∂≠‡∑ù‡∂ª‡∑è‡∂ú‡∂≠‡∑ä option ‡∂ë‡∂ö, ‡∂∏‡∑î‡∂Ω‡∑ä options ‡∑É‡∂∏‡∂ú ‡∑É‡∑É‡∂≥‡∑è index ‡∂ë‡∂ö ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
        for (let i = 0; i < questionData.options.length; i++) {
            if (questionData.options[i] === selectedOption) {
                userAnswerIndex = i;
                break;
            }
        }

        if (userAnswerIndex === -1) {
            console.warn(`Could not find selected option '${selectedOption}' in quiz options.`);
            return;
        }
        
        const isCorrect = (userAnswerIndex === questionData.answer_index);
        const userName = quizScore[voterJid] ? quizScore[voterJid].name : (await conn.getName(voterJid)); // Name ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è‡∂ú‡∂±‡∑ä‡∂±

        let replyMessage = "";
        if (isCorrect) {
            if (!quizScore[voterJid]) {
                quizScore[voterJid] = { name: userName, score: 0 };
            }
            quizScore[voterJid].score++;
            replyMessage = `üéâ *${userName}* ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂≠‡∑ù‡∂ª‡∑è‡∂ú‡∂≠‡∑ä‡∂≠‡∑è!\n\n_‡∂î‡∂∂‡∂ú‡∑ö ‡∂∏‡∑î‡∑Ö‡∑î ‡∂Ω‡∂ö‡∑î‡∂´‡∑î: ${quizScore[voterJid].score}_\n\n*‡∂¥‡∑ê‡∑Ñ‡∑ê‡∂Ø‡∑í‡∂Ω‡∑í ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏:* ${questionData.explanation}`;
        } else {
            const correctAnswerText = questionData.options[questionData.answer_index];
            replyMessage = `‚ùå *${userName}* ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∑è‡∂ú‡∂≠‡∑ä‡∂≠‡∑è.\n‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∑Ä‡∂±‡∑ä‡∂±‡∑ö: *${String.fromCharCode(65 + questionData.answer_index)}. ${correctAnswerText}*\n\n*‡∂¥‡∑ê‡∑Ñ‡∑ê‡∂Ø‡∑í‡∂Ω‡∑í ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏:* ${questionData.explanation}`;
        }
        
        // ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±
        await conn.sendMessage(quizEnabledGroupJid, { text: replyMessage }, { quoted: { key: { remoteJid: quizEnabledGroupJid, id: activeQuizMessageId }, message: { pollCreationMessage: { title: questionData.question } } } });

        // ‡∂ë‡∂ö‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∂ß ‡∂ë‡∂ö‡∑ä ‡∑Ä‡∂ª‡∂ö‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂Ω‡∂ö‡∑î‡∂´‡∑î ‡∂Ø‡∑ì‡∂∏‡∂ß
        // ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ì ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä, ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂Ω‡∂ö‡∑î‡∂´‡∑î ‡∂±‡∑ú‡∂Ø‡∑ì‡∂∏‡∂ß
        if (!quizScore[voterJid] || quizScore[voterJid].hasAnswered === undefined) {
             // (‡∂Ω‡∂ö‡∑î‡∂´‡∑î ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö logic ‡∂ë‡∂ö ‡∂∏‡∑ô‡∑Ñ‡∑í ‡∂â‡∑Ñ‡∑Ö‡∑í‡∂±‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∂ö‡∂ª ‡∂á‡∂≠)
            quizScore[voterJid] = { ...quizScore[voterJid], hasAnswered: true }; // ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ì‡∂∏ ‡∑Ä‡∑ê‡∑Ö‡∑ê‡∂ö‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß
        }
        
        // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑î ‡∂¥‡∑É‡∑î active quiz ‡∂ë‡∂ö reset ‡∂ö‡∂ª‡∂±‡∑ä‡∂± (‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä, ‡∑Ñ‡∑ù ‡∂ä‡∑Ö‡∂ü ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ß ‡∂∫‡∂±‡∑ä‡∂± ‡∂ö‡∂Ω‡∑í‡∂±‡∑ä)
        //activeQuizMessageId = null; 
        //currentQuizQuestionIndex = -1;
    }
}


// Quiz module ‡∂ë‡∂ö export ‡∂ö‡∂ª‡∂±‡∑ä‡∂±, ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± Bot file ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ variables ‡∑É‡∑Ñ functions
module.exports = {
    quizEnabledGroupJid,
    quizIntervalId,
    currentQuizQuestionIndex,
    quizQuestions,
    quizScore,
    activeQuizMessageId, // ‡∂∏‡∑ô‡∂∫‡∂≠‡∑ä export ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    loadQuizState, 
    startQuizInterval,
    handlePollVote // Poll vote handler function ‡∂ë‡∂ö export ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
};
