const { cmd } = require('../command');
const fs = require('fs');
const path = require('path');

// Quiz questions JSON file ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
const QUIZ_QUESTIONS_FILE = path.join(__dirname, '../data/quiz_questions.json'); 
let quizQuestions = [];
try {
    quizQuestions = JSON.parse(fs.readFileSync(QUIZ_QUESTIONS_FILE, 'utf8'));
    if (quizQuestions.length === 0) {
        console.warn("quiz_questions.json is empty or contains no valid questions.");
    }
} catch (error) {
    console.error(`Error loading quiz_questions.json from ${QUIZ_QUESTIONS_FILE}:`, error.message);
    quizQuestions = []; 
}

// Quiz answers (explanations) JSON file ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
const QUIZ_ANSWERS_FILE = path.join(__dirname, '../data/quiz_answers.json'); 
let quizExplanations = {}; // { correct_answer_letter: "Explanation text" }
try {
    quizExplanations = JSON.parse(fs.readFileSync(QUIZ_ANSWERS_FILE, 'utf8'));
} catch (error) {
    console.error(`Error loading quiz_answers.json from ${QUIZ_ANSWERS_FILE}:`, error.message);
    quizExplanations = {};
}

// Quiz ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± group JID ‡∂ë‡∂ö ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß
const QUIZ_STATE_FILE = path.join(__dirname, '../data/quiz_state.json'); 
let quizEnabledGroupJid = null;
let quizIntervalId = null;
let currentQuizQuestionIndex = -1; // ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∑ö index ‡∂ë‡∂ö
let activeQuizQuestionJid = null; // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂∫‡∑ê‡∑Ä‡∑ñ JID
let activeQuizQuestionMessageId = null; // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± message ‡∂ë‡∂ö‡∑ö ID ‡∂ë‡∂ö (quoted reply ‡∑É‡∂≥‡∑Ñ‡∑è)
let answeredParticipants = new Set(); // ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑î‡∂±‡∑ä ‡∂Ö‡∂∫‡∂ú‡∑ö JIDs

// Bot start ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß, ‡∂ö‡∂Ω‡∑í‡∂±‡∑ä ‡∂≠‡∑í‡∂∂‡∑ñ state ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
function loadQuizState() {
    try {
        if (fs.existsSync(QUIZ_STATE_FILE)) {
            const state = JSON.parse(fs.readFileSync(QUIZ_STATE_FILE, 'utf8'));
            if (state && state.groupJid) {
                quizEnabledGroupJid = state.groupJid;
                console.log(`Loaded quiz state: Quiz enabled for JID ${quizEnabledGroupJid}`);
            }
        }
    } catch (error) {
        console.error("Error loading quiz_state.json:", error);
    }
}

// Quiz state ‡∂ë‡∂ö save ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
function saveQuizState() {
    try {
        const dataDir = path.dirname(QUIZ_STATE_FILE);
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
        }
        const state = { groupJid: quizEnabledGroupJid };
        fs.writeFileSync(QUIZ_STATE_FILE, JSON.stringify(state, null, 2), 'utf8'); 
        console.log(`Quiz state saved for JID: ${quizEnabledGroupJid}`);
    } catch (error) {
        console.error("Error saving quiz_state.json:", error);
    }
}

// Quiz Interval ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö function ‡∂ë‡∂ö
function startQuizInterval(conn, jid) {
    if (quizIntervalId) {
        clearInterval(quizIntervalId); 
        console.log(`Cleared existing quiz interval for ${jid}`);
    }
    quizIntervalId = setInterval(async () => {
        if (global.currentConn && quizEnabledGroupJid) {
            await sendQuizQuestion(global.currentConn, quizEnabledGroupJid);
        } else {
            console.warn("Global connection object (global.currentConn) not found or quiz not enabled for any group to send next question.");
            if (quizIntervalId && !quizEnabledGroupJid) {
                clearInterval(quizIntervalId);
                quizIntervalId = null;
                console.log("Quiz interval stopped due to no active quiz group.");
            }
        }
    }, 60 * 60 * 1000); // 1 hour (60 minutes * 60 seconds * 1000 milliseconds)
    console.log(`Quiz interval started for ${jid}`);
}

// Bot start ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß state ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
// Note: This is now called explicitly in index.js on connection open.
// loadQuizState(); // This line can be removed as it's called from index.js

// --- Helper Functions ---

function getContentType(message) {
    if (message.imageMessage) return 'imageMessage';
    if (message.videoMessage) return 'videoMessage';
    if (message.extendedTextMessage) return 'extendedTextMessage';
    if (message.buttonsResponseMessage) return 'buttonsResponseMessage';
    if (message.listResponseMessage) return 'listResponseMessage';
    if (message.templateButtonReplyMessage) return 'templateButtonReplyMessage';
    if (message.text) return 'text';
    return null;
}

// --- Quiz Commands ---

// ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä text ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∂± function ‡∂ë‡∂ö
async function sendQuizQuestion(conn, jid) {
    if (quizQuestions.length === 0) {
        await conn.sendMessage(jid, { text: "‡∂∏‡∂ß ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª quiz_questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∑É‡∂ö‡∑É‡∑è ‡∂á‡∂≠‡∑í ‡∂∂‡∑Ä‡∂ß ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±." });
        return false; 
    }

    currentQuizQuestionIndex = Math.floor(Math.random() * quizQuestions.length);
    const questionData = quizQuestions[currentQuizQuestionIndex];

    let quizMessage = `*‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫:* ${questionData.question}\n\n`;
    questionData.options.forEach((option, index) => {
        quizMessage += `${String.fromCharCode(65 + index)}. ${option}\n`; // A. Option1, B. Option2, ... E. Option5
    });
    quizMessage += "\n*‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑ö ‡∂Ö‡∂ö‡∑î‡∂ª (A, B, C, D, E) type ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*";

    const sentMsg = await conn.sendMessage(jid, { text: quizMessage });
    
    activeQuizQuestionJid = jid;
    activeQuizQuestionMessageId = sentMsg.key.id; // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± message ‡∂ë‡∂ö‡∑ö ID ‡∂ë‡∂ö ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    answeredParticipants.clear(); // ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂ë‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑î‡∂±‡∑ä ‡∂Ö‡∂∫‡∂ú‡∑ö ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä clear ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    console.log(`Sent quiz question (Text) to ${jid}. Question index: ${currentQuizQuestionIndex}, Message ID: ${activeQuizQuestionMessageId}`);
    return true; 
}


// .startmrdai Command (‡∂¥‡∑ê‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑ê‡∂∫‡∂ß Quiz ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß)
cmd({
    pattern: "startmrdai",
    react: "‚úÖ",
    desc: "Start MR D AI quiz in this group (hourly).",
    category: "quiz",
    use: '.startmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply, isOwner, groupMetadata}) => {
    global.currentConn = conn;

    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    if (!isOwner) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö Bot Owner ‡∂ß ‡∂¥‡∂∏‡∂´‡∑í!*");

    if (quizEnabledGroupJid === from) {
        return reply("‚úÖ *Quiz ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∏‡∑ô‡∂∏ Group ‡∂ë‡∂ö‡∑ö ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∂∫‡∑í!*");
    }

    quizEnabledGroupJid = from;
    saveQuizState(); 

    reply(`‚úÖ *MR D AI Quiz ‡∂ë‡∂ö "${groupMetadata.subject}" Group ‡∂ë‡∂ö‡∑ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì. ‡∑É‡∑ë‡∂∏ ‡∂¥‡∑ê‡∂∫‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂ë‡∑Ä‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö.*`);
    
    // ‡∑Ä‡∑Ñ‡∑è‡∂∏ ‡∂¥‡∑Ö‡∂∏‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±, ‡∂¥‡∑É‡∑î‡∑Ä interval ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    await sendQuizQuestion(conn, from);
    startQuizInterval(conn, from); 
});


// .stopmrdai Command (Quiz ‡∂ë‡∂ö ‡∂±‡∑ê‡∑Ä‡∑ê‡∂≠‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß)
cmd({
    pattern: "stopmrdai",
    react: "‚ùå",
    desc: "Stop MR D AI quiz in this group.",
    category: "quiz",
    use: '.stopmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply, isOwner}) => {
    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    if (!isOwner) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö Bot Owner ‡∂ß ‡∂¥‡∂∏‡∂´‡∑í!*");

    if (quizEnabledGroupJid !== from) {
        return reply("‚ùå *Quiz ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∏‡∑ô‡∂∏ Group ‡∂ë‡∂ö‡∑ö ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂±‡∑ê‡∂≠!*");
    }

    if (quizIntervalId) {
        clearInterval(quizIntervalId);
        quizIntervalId = null;
    }
    quizEnabledGroupJid = null;
    activeQuizQuestionJid = null;
    activeQuizQuestionMessageId = null;
    answeredParticipants.clear(); 
    saveQuizState(); 

    reply("üõë *MR D AI Quiz ‡∂ë‡∂ö ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ì.*");
});

// .getmrdai Command (‡∂ë‡∑É‡∑ê‡∂´‡∑í‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß)
cmd({
    pattern: "getmrdai",
    react: "üí°",
    desc: "Get a new MR D AI quiz question instantly.",
    category: "quiz",
    use: '.getmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply}) => {
    global.currentConn = conn;

    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    
    const sent = await sendQuizQuestion(conn, from);
    if (!sent) {
        reply("üòî *‡∂Ø‡∑ê‡∂±‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.* ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª quiz_questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
    }
});


// --- Incoming Message Handler (index.js ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä ‡∂ö‡∑ê‡∂≥‡∑Ä‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö) ---
// ‡∂∏‡∑ô‡∂∏ function ‡∂ë‡∂ö ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂± ‡∑É‡∑í‡∂∫‡∂Ω‡∑î messages handle ‡∂ö‡∂ª‡∂∫‡∑í
async function handleIncomingMessage(conn, mek) {
    if (!mek.message) return;
    if (mek.key.remoteJid === 'status@broadcast') return;
    if (mek.key.id.startsWith('BAE5') && mek.key.id.length === 16) return; // Baileys internal messages

    const from = mek.key.remoteJid;
    const isGroup = from.endsWith('@g.us');
    const sender = mek.key.fromMe ? (conn.user.id.includes(':') ? conn.user.id.split(':')[0] + '@s.whatsapp.net' : conn.user.id) : (mek.key.participant || from);
    const botNumber = conn.user.id.includes(':') ? conn.user.id.split(':')[0] : conn.user.id.split('@')[0];
    const fromMe = mek.key.fromMe;

    const messageType = getContentType(mek.message);
    let body = '';
    
    // Extract message text content
    if (messageType === 'extendedTextMessage') {
        body = mek.message.extendedTextMessage.text;
    } else if (messageType === 'buttonsResponseMessage') {
        body = mek.message.buttonsResponseMessage.selectedButtonId;
    } else if (messageType === 'listResponseMessage') {
        body = mek.message.listResponseMessage.singleSelectReply.selectedRowId;
    } else if (messageType === 'templateButtonReplyMessage') {
        body = mek.message.templateButtonReplyMessage.selectedId;
    } else if (messageType === 'imageMessage' && mek.message.imageMessage.caption) {
        body = mek.message.imageMessage.caption;
    } else if (messageType === 'videoMessage' && mek.message.videoMessage.caption) {
        body = mek.message.videoMessage.caption;
    } else if (messageType === 'documentMessage' && mek.message.documentMessage.caption) {
        body = mek.message.documentMessage.caption;
    } else if (messageType === 'text') {
        body = mek.message.text;
    }

    // Only process if a quiz is active and it's from the correct group
    // Also ensure it's not a command message (assuming commands start with a prefix)
    // global.config?.PREFIX ‡∂∫‡∂±‡∑î prefix ‡∂ë‡∂ö global.config object ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂∫‡∑í
    const isCommand = body.startsWith(global.config?.PREFIX || '!'); 
    
    // Quiz ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± group ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä, Bot ‡∂ú‡∑ô‡∂±‡∑ä ‡∂±‡∑ú‡∑Ä‡∂±, command ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ú‡∑Ä‡∂± message ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∂∏‡∑ä
    if (isGroup && quizEnabledGroupJid === from && currentQuizQuestionIndex !== -1 && !fromMe && !isCommand) {
        // Check if the participant has already answered this question
        if (answeredParticipants.has(sender)) {
            console.log(`Participant ${sender} has already answered for this quiz question. Ignoring.`);
            return; // Already answered, ignore duplicate
        }

        const questionData = quizQuestions[currentQuizQuestionIndex];
        const correctAnswerIndex = questionData.answer_index;
        const correctAnswerLetter = String.fromCharCode(65 + correctAnswerIndex); // "A", "B", "C", "D", "E" ‡∑Ä‡∑ê‡∂±‡∑í

        // User's answer, trimmed and converted to uppercase for case-insensitive comparison
        const userAnswer = body.trim().toUpperCase();

        if (userAnswer === correctAnswerLetter) {
            // Correct Answer
            const userName = await conn.getName(sender);
            // quizExplanations object ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö ‡∂¥‡∑ê‡∑Ñ‡∑ê‡∂Ø‡∑í‡∂Ω‡∑í ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
            const explanationText = quizExplanations[correctAnswerLetter] || "‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í!";
            
            // Reply message ‡∂ë‡∂ö "User Name, ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í! [Explanation]" format ‡∂ë‡∂ö‡∂ß ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            const replyMessage = `üéâ *${userName}*, ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í! ${explanationText}`;

            await conn.sendMessage(from, { text: replyMessage }, { 
                quoted: { 
                    key: { remoteJid: from, id: activeQuizQuestionMessageId }, 
                    message: { conversation: questionData.question } // Quoted message is the original question
                } 
            });

            // Add participant to the set of answered participants for this question
            answeredParticipants.add(sender);
            console.log(`Correct answer from ${userName} (${sender}). Explanation: ${explanationText}`);
        } else {
            // Incorrect Answer - no reply needed for incorrect answers as per current requirement
            console.log(`Incorrect answer from ${sender}. Answered: ${userAnswer}, Correct: ${correctAnswerLetter}`);
        }
    }
}


// Quiz module ‡∂ë‡∂ö export ‡∂ö‡∂ª‡∂±‡∑ä‡∂±, ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± Bot file ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ variables ‡∑É‡∑Ñ functions
module.exports = {
    quizEnabledGroupJid,
    quizIntervalId,
    currentQuizQuestionIndex,
    quizQuestions,
    activeQuizQuestionJid,
    activeQuizQuestionMessageId,
    loadQuizState, 
    startQuizInterval,
    handleIncomingMessage // ‡∑É‡∑í‡∂∫‡∂Ω‡∑î incoming messages handle ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂∏‡∑ô‡∂∏ function ‡∂ë‡∂ö export ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
};
