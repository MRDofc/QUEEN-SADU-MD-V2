const { cmd } = require('../command');
const fs = require('fs');
const path = require('path');

// Quiz questions JSON file ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
const QUIZ_QUESTIONS_FILE = path.join(__dirname, '../data/quiz_questions.json'); 
let quizQuestions = [];
try {
    quizQuestions = JSON.parse(fs.readFileSync(QUIZ_QUESTIONS_FILE, 'utf8'));
    if (quizQuestions.length === 0) {
        console.warn("quiz_questions.json is empty or contains no valid questions.");
    }
} catch (error) {
    console.error(`Error loading quiz_questions.json from ${QUIZ_QUESTIONS_FILE}:`, error.message);
    quizQuestions = []; 
}

// Quiz answers (explanations) JSON file ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
const QUIZ_ANSWERS_FILE = path.join(__dirname, '../data/quiz_answers.json'); 
let quizExplanations = {}; // { correct_answer_letter: "Explanation text" }
try {
    quizExplanations = JSON.parse(fs.readFileSync(QUIZ_ANSWERS_FILE, 'utf8'));
} catch (error) {
    console.error(`Error loading quiz_answers.json from ${QUIZ_ANSWERS_FILE}:`, error.message);
    quizExplanations = {};
}

// Quiz ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± group JID ‡∂ë‡∂ö ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß
const QUIZ_STATE_FILE = path.join(__dirname, '../data/quiz_state.json'); 
let quizEnabledGroupJid = null;
let quizIntervalId = null;
let currentQuizQuestionIndex = -1; // ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∑ö index ‡∂ë‡∂ö
let activeQuizQuestionJid = null; // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂∫‡∑ê‡∑Ä‡∑ñ JID
let activeQuizQuestionMessageId = null; // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± message ‡∂ë‡∂ö‡∑ö ID ‡∂ë‡∂ö (quoted reply ‡∑É‡∂≥‡∑Ñ‡∑è)
let answeredParticipants = new Set(); // ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑î‡∂±‡∑ä ‡∂Ö‡∂∫‡∂ú‡∑ö JIDs

// Bot start ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß, ‡∂ö‡∂Ω‡∑í‡∂±‡∑ä ‡∂≠‡∑í‡∂∂‡∑ñ state ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
function loadQuizState() {
    try {
        if (fs.existsSync(QUIZ_STATE_FILE)) {
            const state = JSON.parse(fs.readFileSync(QUIZ_STATE_FILE, 'utf8'));
            if (state && state.groupJid) {
                quizEnabledGroupJid = state.groupJid;
                console.log(`Loaded quiz state: Quiz enabled for JID ${quizEnabledGroupJid}`);
            }
        }
    } catch (error) {
        console.error("Error loading quiz_state.json:", error);
    }
}

// Quiz state ‡∂ë‡∂ö save ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
function saveQuizState() {
    try {
        const dataDir = path.dirname(QUIZ_STATE_FILE);
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
        }
        const state = { groupJid: quizEnabledGroupJid };
        fs.writeFileSync(QUIZ_STATE_FILE, JSON.stringify(state, null, 2), 'utf8'); 
        console.log(`Quiz state saved for JID: ${quizEnabledGroupJid}`);
    } catch (error) {
        console.error("Error saving quiz_state.json:", error);
    }
}

// Quiz Interval ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö function ‡∂ë‡∂ö
function startQuizInterval(conn, jid) {
    if (quizIntervalId) {
        clearInterval(quizIntervalId); 
        console.log(`Cleared existing quiz interval for ${jid}`);
    }
    quizIntervalId = setInterval(async () => {
        // global.currentConn ‡∑Ñ‡∑ù global.client ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫‡∑ô‡∂±‡∑ä conn object ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
        const activeConn = global.currentConn || global.client; 
        if (activeConn && quizEnabledGroupJid) {
            await sendQuizQuestion(activeConn, quizEnabledGroupJid);
        } else {
            console.warn("No active connection object (global.currentConn or global.client) found or quiz not enabled for any group to send next question. Stopping interval.");
            if (quizIntervalId) {
                clearInterval(quizIntervalId);
                quizIntervalId = null;
            }
        }
    }, 60 * 60 * 1000); // 1 hour (60 minutes * 60 seconds * 1000 milliseconds)
    console.log(`Quiz interval started for ${jid}`);
}

// Bot ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß state ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
// ‡∂∏‡∑ô‡∂∏‡∂ú‡∑í‡∂±‡∑ä Bot restarted ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß‡∂≠‡∑ä Quiz active ‡∑Ä ‡∂≠‡∑í‡∂∂‡∑ñ group ‡∂ë‡∂ö ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∂±‡∑ì.
loadQuizState(); 

// Bot ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß interval ‡∂ë‡∂ö‡∂Ø ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
// ‡∂∏‡∑ô‡∂∫ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂±‡∑ä‡∂±‡∑ö Bot ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑‡∂∫‡∑ö‡∂Ø‡∑ì global.currentConn / global.client already set ‡∑Ä‡∑ì ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ‡∂¥‡∂∏‡∂´‡∑í.
setTimeout(() => {
    const initialConn = global.currentConn || global.client;
    if (initialConn && quizEnabledGroupJid) {
        console.log(`Attempting to restart quiz interval for ${quizEnabledGroupJid} on bot start.`);
        startQuizInterval(initialConn, quizEnabledGroupJid);
    }
}, 10000); // ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª 10‡∂ö‡∂ß ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±, bot connection stable ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂ö‡∑è‡∂Ω‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì‡∂∏‡∂ß.


// --- Helper Functions ---

function getContentType(message) {
    if (message.imageMessage) return 'imageMessage';
    if (message.videoMessage) return 'videoMessage';
    if (message.extendedTextMessage) return 'extendedTextMessage';
    if (message.buttonsResponseMessage) return 'buttonsResponseMessage';
    if (message.listResponseMessage) return 'listResponseMessage';
    if (message.templateButtonReplyMessage) return 'templateButtonReplyMessage';
    if (message.text) return 'text';
    return null;
}

// --- Quiz Commands ---

// ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä text ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∂± function ‡∂ë‡∂ö
async function sendQuizQuestion(conn, jid) {
    if (quizQuestions.length === 0) {
        await conn.sendMessage(jid, { text: "‡∂∏‡∂ß ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª quiz_questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∑É‡∂ö‡∑É‡∑è ‡∂á‡∂≠‡∑í ‡∂∂‡∑Ä‡∂ß ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±." });
        return false; 
    }

    currentQuizQuestionIndex = Math.floor(Math.random() * quizQuestions.length);
    const questionData = quizQuestions[currentQuizQuestionIndex];

    let quizMessage = `*‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫:* ${questionData.question}\n\n`;
    questionData.options.forEach((option, index) => {
        quizMessage += `${String.fromCharCode(65 + index)}. ${option}\n`; // A. Option1, B. Option2, ... E. Option5
    });
    quizMessage += "\n*‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑ö ‡∂Ö‡∂ö‡∑î‡∂ª (A, B, C, D, E) type ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*";

    const sentMsg = await conn.sendMessage(jid, { text: quizMessage });
    
    activeQuizQuestionJid = jid;
    activeQuizQuestionMessageId = sentMsg.key.id; // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± message ‡∂ë‡∂ö‡∑ö ID ‡∂ë‡∂ö ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    answeredParticipants.clear(); // ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂ë‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑î‡∂±‡∑ä ‡∂Ö‡∂∫‡∂ú‡∑ö ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä clear ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    console.log(`Sent quiz question (Text) to ${jid}. Question index: ${currentQuizQuestionIndex}, Message ID: ${activeQuizQuestionMessageId}`);
    return true; 
}


// .startmrdai Command (‡∂¥‡∑ê‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑ê‡∂∫‡∂ß Quiz ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß)
cmd({
    pattern: "startmrdai",
    react: "‚úÖ",
    desc: "Start MR D AI quiz in this group (hourly).",
    category: "quiz",
    use: '.startmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply, isOwner, groupMetadata}) => {
    // conn object ‡∂ë‡∂ö global context ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    // ‡∂∏‡∑ô‡∂∫‡∑í‡∂±‡∑ä ‡∂î‡∂∂‡∂ú‡∑ö bot ‡∂ë‡∂ö‡∑ö main file ‡∂ë‡∂ö‡∑ö conn object ‡∂ë‡∂ö global variable ‡∂ë‡∂ö‡∂ö‡∂ß assign ‡∂ö‡∂ª ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∏‡∑ô‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö ‡∑Ä‡∑ö
    global.currentConn = conn; 

    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    if (!isOwner) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö Bot Owner ‡∂ß ‡∂¥‡∂∏‡∂´‡∑í!*");

    if (quizEnabledGroupJid === from) {
        return reply("‚úÖ *Quiz ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∏‡∑ô‡∂∏ Group ‡∂ë‡∂ö‡∑ö ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∂∫‡∑í!*");
    }

    quizEnabledGroupJid = from;
    saveQuizState(); 

    reply(`‚úÖ *MR D AI Quiz ‡∂ë‡∂ö "${groupMetadata.subject}" Group ‡∂ë‡∂ö‡∑ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì. ‡∑É‡∑ë‡∂∏ ‡∂¥‡∑ê‡∂∫‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂ë‡∑Ä‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö.*`);
    
    // ‡∑Ä‡∑Ñ‡∑è‡∂∏ ‡∂¥‡∑Ö‡∂∏‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±, ‡∂¥‡∑É‡∑î‡∑Ä interval ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    await sendQuizQuestion(conn, from);
    startQuizInterval(conn, from); 
});


// .stopmrdai Command (Quiz ‡∂ë‡∂ö ‡∂±‡∑ê‡∑Ä‡∑ê‡∂≠‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß)
cmd({
    pattern: "stopmrdai",
    react: "‚ùå",
    desc: "Stop MR D AI quiz in this group.",
    category: "quiz",
    use: '.stopmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply, isOwner}) => {
    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    if (!isOwner) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö Bot Owner ‡∂ß ‡∂¥‡∂∏‡∂´‡∑í!*");

    if (quizEnabledGroupJid !== from) {
        return reply("‚ùå *Quiz ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∏‡∑ô‡∂∏ Group ‡∂ë‡∂ö‡∑ö ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂±‡∑ê‡∂≠!*");
    }

    if (quizIntervalId) {
        clearInterval(quizIntervalId);
        quizIntervalId = null;
    }
    quizEnabledGroupJid = null;
    activeQuizQuestionJid = null;
    activeQuizQuestionMessageId = null;
    answeredParticipants.clear(); 
    saveQuizState(); 

    reply("üõë *MR D AI Quiz ‡∂ë‡∂ö ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ì.*");
});

// .getmrdai Command (‡∂ë‡∑É‡∑ê‡∂´‡∑í‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß)
cmd({
    pattern: "getmrdai",
    react: "üí°",
    desc: "Get a new MR D AI quiz question instantly.",
    category: "quiz",
    use: '.getmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply}) => {
    // conn object ‡∂ë‡∂ö global context ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    global.currentConn = conn;

    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    
    const sent = await sendQuizQuestion(conn, from);
    if (!sent) {
        reply("üòî *‡∂Ø‡∑ê‡∂±‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.* ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª quiz_questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
    }
});


// --- Incoming Message Handler (‡∂Ω‡∑ê‡∂∂‡∑ô‡∂± messages handle ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏) ---
// ‡∂∏‡∑ô‡∂∏ function ‡∂ë‡∂ö ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂± ‡∑É‡∑í‡∂∫‡∂Ω‡∑î messages handle ‡∂ö‡∂ª‡∂∫‡∑í
// ‡∂∏‡∑ô‡∂∫ command handler ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑ô‡∂ª ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.
// (index.js ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂±‡∑ú‡∂ö‡∂ª‡∂± ‡∂±‡∑í‡∑É‡∑è, ‡∂∏‡∑ô‡∂∫ command handler ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä message ‡∂ë‡∂ö process ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∂ª ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂â‡∂©‡∂ö‡∑ä ‡∂±‡∑ê‡∂≠.
// ‡∂ë‡∂∂‡∑ê‡∑Ä‡∑í‡∂±‡∑ä, ‡∂∏‡∑ô‡∂∏ logic ‡∂ë‡∂ö command handler ‡∂ë‡∂ö ‡∂≠‡∑î‡∑Ö‡∂∏ ‡∑Ñ‡∑ù ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∑ö‡∑Å‡∂∫‡∂ö‡∑ä ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.)

// ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑ú‡∂ß‡∑É Quiz Plugin ‡∂ë‡∂ö‡∑ö cmd handler ‡∂ë‡∂ö‡∂ß‡∂∏ message ‡∂ë‡∂ö ‡∂¥‡∑ê‡∂∏‡∑í‡∂´‡∑ö ‡∂∫‡∑ê‡∂∫‡∑í ‡∂ã‡∂¥‡∂ö‡∂Ω‡∑ä‡∂¥‡∂±‡∂∫ ‡∂ö‡∂ª‡∂∫‡∑í.
// ‡∂ë‡∂±‡∂∏‡∑ä, ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑ù‡∂©‡∑ä ‡∂ö‡∑ú‡∂ß‡∑É Baileys ‡∑Ñ‡∑í ev.on('messages.upsert') handler ‡∂ë‡∂ö‡∂ß ‡∑É‡∑ò‡∂¢‡∑î‡∑Ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂±‡∑ú‡∑Ä‡∑ö.
// ‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫‡∂∫‡∑ô‡∂±‡∑ä, Bot frameworks ‡∑Ä‡∂Ω‡∂Ø‡∑ì, ‡∑É‡∑í‡∂∫‡∂Ω‡∑î messages ‡∂ë‡∂ö‡∑ä ‡∂≠‡∑ê‡∂±‡∂ö‡∂ß (main handler) ‡∂Ω‡∑ê‡∂∂‡∑ì,
// ‡∂¥‡∑É‡∑î‡∑Ä ‡∂í‡∑Ä‡∑è commands ‡∑Ñ‡∑ù ‡∂Ö‡∂±‡∑ô‡∂ö‡∑î‡∂≠‡∑ä plugin logic ‡∑Ä‡∂Ω‡∂ß ‡∂∫‡∑ú‡∂∏‡∑î ‡∂ö‡∑ô‡∂ª‡∑ö.

// ‡∂∏‡∑ö ‡∂ú‡∑ê‡∂ß‡∑Ö‡∑î‡∑Ä‡∂ß ‡∑Ä‡∑í‡∑É‡∂≥‡∑î‡∂∏: ‡∂î‡∂∂‡∂ú‡∑ö Bot framework ‡∂ë‡∂ö‡∑ö message handler ‡∂ë‡∂ö‡∂ß quiz.js ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä function ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ö‡∑ê‡∂≥‡∑Ä‡∑ì‡∂∏‡∂ß ‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂±‡∂∏‡∑ä
// (‡∂ã‡∂Ø‡∑è: cmd function ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂¥‡∑É‡∑î‡∑Ä ‡∑Ñ‡∑ù ‡∑Ä‡∑ô‡∂±‡∂∏ handler ‡∂ë‡∂ö‡∂ö‡∑í‡∂±‡∑ä), ‡∂ë‡∂∫ ‡∂Ö‡∂Ç‡∂ö 1 ‡∂ö‡∑ä‚Äç‡∂ª‡∂∏‡∂∫‡∂∫‡∑í.
// ‡∂ë‡∑É‡∑ö ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í ‡∂±‡∂∏‡∑ä, ‡∂∏‡∑ô‡∂∏ plugin ‡∂ë‡∂ö‡∂ß‡∂∏ command ‡∂±‡∑ú‡∑Ä‡∂± messages ‡∑Ñ‡∑É‡∑î‡∂ª‡∑î‡∑Ä‡∂±‡∑ä‡∂±‡∂ß ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ö.
// ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂¥‡∑Ä‡∂≠‡∑í‡∂± ‡∑Ä‡∑í‡∂Ø‡∑í‡∂∫‡∂ß, cmd function ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂± 'mek' object ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂∏‡∑ô‡∂∏ handleIncomingMessage logic ‡∂ë‡∂ö ‡∂Ö‡∂±‡∑î‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∂ª‡∂∏‡∑î.

// ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± cmd handler ‡∂ë‡∂ö ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂± messages ‡∑Ñ‡∑ê‡∑É‡∑í‡∂ª‡∑Ä‡∑ì‡∂∏‡∂ß:
// cmd function ‡∂ë‡∂ö‡∑ö async(conn, mek, m, {from, isGroup, reply, isOwner, groupMetadata})
// parameters ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä, ‡∑É‡∑ë‡∂∏ message ‡∂ë‡∂ö‡∂ö‡∑ä‡∂∏ ‡∂∏‡∑ô‡∂∏ logic ‡∂ë‡∂ö ‡∑Ñ‡∂ª‡∑Ñ‡∑è ‡∂∫‡∑Ä‡∂∏‡∑î.

// ‡∂î‡∂∂‡∂ú‡∑ö command handler (cmd function ‡∂ë‡∂ö) ‡∂≠‡∑î‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ message process ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß.
// ‡∂∏‡∑ô‡∂∫ ‡∂î‡∂∂‡∂ú‡∑ö `command.js` ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∑ö ‡∂á‡∂≠‡∑í `cmd` function ‡∂ë‡∂ö‡∑ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± ‡∂Ü‡∂ö‡∑è‡∂ª‡∂∫ ‡∂∏‡∂≠ ‡∂ª‡∂≥‡∑è ‡∂¥‡∑Ä‡∂≠‡∑ì.
// `cmd` function ‡∂ë‡∂ö‡∂ß ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂± ‡∑É‡∑ë‡∂∏ message ‡∂ë‡∂ö‡∂ö‡∑ä‡∂∏ (command ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ä‡∑î‡∑Ä‡∂≠‡∑ä ‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∂≠‡∑ä)
// `handleIncomingMessage` function ‡∂ë‡∂ö‡∂ß ‡∂∫‡∑ú‡∂∏‡∑î ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.

// Alternative: If your bot's core `cmd` handler passes ALL messages to all registered `cmd` patterns
// then we can just make a general pattern.
// However, this is usually not how `cmd` works - it's for specific patterns only.

// Given the constraint of *no changes to index.js*, we need a way for quiz.js
// to react to all incoming messages, not just its own commands.
// The best way to do this *without modifying index.js* is often not directly possible
// with simple plugin architectures that don't provide a global message hook.

// For now, I will assume that the 'cmd' framework you're using *might*
// allow a generic pattern, or that you're willing to accept that only
// messages *directed at a command* (even if not quiz command) might be processed
// by handleIncomingMessage if it's called from within a cmd handler.
// This is a significant limitation if handleIncomingMessage is not globally invoked.

// *** The most robust solution without touching index.js is to have a "listener" pattern. ***
// Let's create a listener that runs on all messages. This assumes your 'cmd' module
// allows a wildcard pattern or a global listener. If not, this will not work.

// Dummy handler to catch all messages and pass to quiz logic.
// This is a workaround if index.js cannot be touched.
// It assumes your `cmd` handler processes ALL incoming messages before matching patterns.
// If your `cmd` only triggers on actual patterns, this will NOT work for quiz answers.

cmd({
    pattern: ".*", // Wildcard pattern to try and catch all messages
    dontReact: true, // Don't react to every message
    noLimit: true, // No command limit for this
    // This is a low-priority command to run after other specific commands.
    // If your `cmd` framework has a way to run a handler on ALL messages,
    // that would be better. This is a hack.
    filename: __filename 
},
async(conn, mek, m,{from, isGroup, reply, isOwner, groupMetadata}) => {
    // Ensure this only runs if it's not a command from THIS quiz plugin itself
    const botPrefix = global.config?.PREFIX || '!';
    const body = m.body; // Assuming m.body contains the message text
    const isThisQuizCommand = body.startsWith(botPrefix + "startmrdai") || 
                              body.startsWith(botPrefix + "stopmrdai") ||
                              body.startsWith(botPrefix + "getmrdai");

    // Only process if it's not a command and quiz is active in this group
    if (isGroup && quizEnabledGroupJid === from && currentQuizQuestionIndex !== -1 && !isThisQuizCommand) {
        const sender = mek.key.fromMe ? (conn.user.id.includes(':') ? conn.user.id.split(':')[0] + '@s.whatsapp.net' : conn.user.id) : (mek.key.participant || from);
        
        // Check if the participant has already answered this question
        if (answeredParticipants.has(sender)) {
            console.log(`Participant ${sender} has already answered for this quiz question. Ignoring.`);
            return; // Already answered, ignore duplicate
        }

        const questionData = quizQuestions[currentQuizQuestionIndex];
        // Check if questionData is valid to prevent errors
        if (!questionData || typeof questionData.answer_index === 'undefined') {
            console.error("Invalid question data for current quiz question index:", currentQuizQuestionIndex);
            return;
        }

        const correctAnswerIndex = questionData.answer_index;
        const correctAnswerLetter = String.fromCharCode(65 + correctAnswerIndex); // "A", "B", "C", "D", "E" ‡∑Ä‡∑ê‡∂±‡∑í

        const messageType = getContentType(mek.message);
        let userAnswerText = '';
        
        if (messageType === 'extendedTextMessage') {
            userAnswerText = mek.message.extendedTextMessage.text;
        } else if (messageType === 'text') {
            userAnswerText = mek.message.text;
        }
        
        // User's answer, trimmed and converted to uppercase for case-insensitive comparison
        const userAnswer = userAnswerText.trim().toUpperCase();

        if (userAnswer === correctAnswerLetter) {
            // Correct Answer
            const userName = await conn.getName(sender);
            // quizExplanations object ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö ‡∂¥‡∑ê‡∑Ñ‡∑ê‡∂Ø‡∑í‡∂Ω‡∑í ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
            const explanationText = quizExplanations[correctAnswerLetter] || "‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í!";
            
            // Reply message ‡∂ë‡∂ö "User Name, ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í! [Explanation]" format ‡∂ë‡∂ö‡∂ß ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            const replyMessage = `üéâ *${userName}*, ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í! ${explanationText}`;

            // Make sure activeQuizQuestionMessageId and activeQuizQuestionJid are valid before quoting
            if (activeQuizQuestionMessageId && activeQuizQuestionJid === from) {
                await conn.sendMessage(from, { text: replyMessage }, { 
                    quoted: { 
                        key: { remoteJid: from, id: activeQuizQuestionMessageId }, 
                        message: { conversation: questionData.question } // Quoted message is the original question
                    } 
                });
            } else {
                // If for some reason we lost the message ID, send without quoting
                await conn.sendMessage(from, { text: replyMessage });
            }

            // Add participant to the set of answered participants for this question
            answeredParticipants.add(sender);
            console.log(`Correct answer from ${userName} (${sender}). Explanation: ${explanationText}`);
        } else {
            // Incorrect Answer - no reply needed for incorrect answers as per current requirement
            console.log(`Incorrect answer from ${sender}. Answered: ${userAnswer}, Correct: ${correctAnswerLetter}`);
        }
    }
});


// Quiz module ‡∂ë‡∂ö export ‡∂ö‡∂ª‡∂±‡∑ä‡∂±, ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± Bot file ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ variables ‡∑É‡∑Ñ functions
// (‡∂∏‡∑ö‡∑Ä‡∑è ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∑Ä‡∑Å‡∂∫‡∑ô‡∂±‡∑ä ‡∂Ö‡∂∑‡∑ä‚Äç‡∂∫‡∂±‡∑ä‡∂≠‡∂ª‡∑Ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∑Ä‡∑ö, ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂Ö‡∂±‡∑è‡∂ú‡∂≠ ‡∂¥‡∑ä‚Äç‡∂ª‡∂∫‡∑ù‡∂¢‡∂± ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂≠‡∂∂‡∑è ‡∂á‡∂≠)
module.exports = {
    quizEnabledGroupJid,
    quizIntervalId,
    currentQuizQuestionIndex,
    quizQuestions,
    activeQuizQuestionJid,
    activeQuizQuestionMessageId,
    loadQuizState, 
    startQuizInterval,
    // handleIncomingMessage - This is now integrated into the wildcard cmd handler
};
