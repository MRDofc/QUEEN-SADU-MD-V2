const { cmd } = require('../command');
const fs = require('fs');
const path = require('path');

// Quiz questions JSON file ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
const QUIZ_QUESTIONS_FILE = path.join(__dirname, '../data/quiz_questions.json'); 
let quizQuestions = [];
try {
    quizQuestions = JSON.parse(fs.readFileSync(QUIZ_QUESTIONS_FILE, 'utf8'));
    if (quizQuestions.length === 0) {
        console.warn("quiz_questions.json is empty or contains no valid questions.");
    }
} catch (error) {
    console.error(`Error loading quiz_questions.json from ${QUIZ_QUESTIONS_FILE}:`, error.message);
    quizQuestions = []; 
}

// Quiz ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± group JID ‡∂ë‡∂ö ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß
const QUIZ_STATE_FILE = path.join(__dirname, '../data/quiz_state.json'); 
let quizEnabledGroupJid = null;
let quizIntervalId = null;
let currentQuizQuestionIndex = -1; 
let quizScore = {}; 

// Bot start ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß, ‡∂ö‡∂Ω‡∑í‡∂±‡∑ä ‡∂≠‡∑í‡∂∂‡∑ñ state ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
function loadQuizState() {
    try {
        if (fs.existsSync(QUIZ_STATE_FILE)) {
            const state = JSON.parse(fs.readFileSync(QUIZ_STATE_FILE, 'utf8'));
            if (state && state.groupJid) {
                quizEnabledGroupJid = state.groupJid;
                console.log(`Loaded quiz state: Quiz enabled for JID ${quizEnabledGroupJid}`);
            }
        }
    } catch (error) {
        console.error("Error loading quiz_state.json:", error);
    }
}

// Quiz state ‡∂ë‡∂ö save ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
function saveQuizState() {
    try {
        const dataDir = path.dirname(QUIZ_STATE_FILE);
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
        }
        const state = { groupJid: quizEnabledGroupJid };
        fs.writeFileSync(QUIZ_STATE_FILE, JSON.stringify(state, null, 2), 'utf8'); 
        console.log(`Quiz state saved for JID: ${quizEnabledGroupJid}`);
    } catch (error) {
        console.error("Error saving quiz_state.json:", error);
    }
}

// Quiz Interval ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö function ‡∂ë‡∂ö
function startQuizInterval(conn, jid) {
    if (quizIntervalId) {
        clearInterval(quizIntervalId); 
        console.log(`Cleared existing quiz interval for ${jid}`);
    }
    quizIntervalId = setInterval(async () => {
        if (global.currentConn && quizEnabledGroupJid) {
            await sendQuizQuestion(global.currentConn, quizEnabledGroupJid);
        } else {
            console.warn("Global connection object (global.currentConn) not found or quiz not enabled for any group to send next question.");
            if (quizIntervalId && !quizEnabledGroupJid) {
                clearInterval(quizIntervalId);
                quizIntervalId = null;
                console.log("Quiz interval stopped due to no active quiz group.");
            }
        }
    }, 60 * 60 * 1000); 
    console.log(`Quiz interval started for ${jid}`);
}

// Bot start ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß state ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
loadQuizState();

// --- Quiz Commands ---

// ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∂± function ‡∂ë‡∂ö
async function sendQuizQuestion(conn, jid) {
    if (quizQuestions.length === 0) {
        await conn.sendMessage(jid, { text: "‡∂∏‡∂ß ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª quiz_questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∑É‡∂ö‡∑É‡∑è ‡∂á‡∂≠‡∑í ‡∂∂‡∑Ä‡∂ß ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±." });
        return false; // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑ñ ‡∂∂‡∑Ä ‡∂Ø‡∂ö‡∑ä‡∑Ä‡∂∫‡∑í
    }

    currentQuizQuestionIndex = Math.floor(Math.random() * quizQuestions.length);
    const questionData = quizQuestions[currentQuizQuestionIndex];

    let questionText = `*MRD AI Quiz - ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫:*\n\n${questionData.question}\n\n`;
    const buttons = questionData.options.map((option, index) => ({
        buttonId: `quiz_answer_${index}`, 
        buttonText: { displayText: `${String.fromCharCode(65 + index)}. ${option}` }, 
        type: 1 
    }));

    const buttonMessage = {
        text: questionText,
        footer: "‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:",
        buttons: buttons,
        headerType: 1
    };

    await conn.sendMessage(jid, buttonMessage);
    quizScore = {}; 
    console.log(`Sent quiz question to ${jid}. Question index: ${currentQuizQuestionIndex}`);
    return true; // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ñ ‡∂∂‡∑Ä ‡∂Ø‡∂ö‡∑ä‡∑Ä‡∂∫‡∑í
}


// .startmrdai Command (‡∂¥‡∑ê‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑ê‡∂∫‡∂ß Quiz ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß)
cmd({
    pattern: "startmrdai",
    react: "‚úÖ",
    desc: "Start MR D AI quiz in this group (hourly).",
    category: "quiz",
    use: '.startmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply, isOwner, groupMetadata}) => {
    global.currentConn = conn;

    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    if (!isOwner) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö Bot Owner ‡∂ß ‡∂¥‡∂∏‡∂´‡∑í!*");

    if (quizEnabledGroupJid === from) {
        return reply("‚úÖ *Quiz ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∏‡∑ô‡∂∏ Group ‡∂ë‡∂ö‡∑ö ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∂∫‡∑í!*");
    }

    quizEnabledGroupJid = from;
    saveQuizState(); 

    reply(`‚úÖ *MR D AI Quiz ‡∂ë‡∂ö "${groupMetadata.subject}" Group ‡∂ë‡∂ö‡∑ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì. ‡∑É‡∑ë‡∂∏ ‡∂¥‡∑ê‡∂∫‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂ë‡∑Ä‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö.*`);
    
    // ‡∑Ä‡∑Ñ‡∑è‡∂∏ ‡∂¥‡∑Ö‡∂∏‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±, ‡∂¥‡∑É‡∑î‡∑Ä interval ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    await sendQuizQuestion(conn, from);
    startQuizInterval(conn, from); 
});


// .stopmrdai Command (Quiz ‡∂ë‡∂ö ‡∂±‡∑ê‡∑Ä‡∑ê‡∂≠‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß)
cmd({
    pattern: "stopmrdai",
    react: "‚ùå",
    desc: "Stop MR D AI quiz in this group.",
    category: "quiz",
    use: '.stopmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply, isOwner}) => {
    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    if (!isOwner) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑ä‡∂ö‡∑ö Bot Owner ‡∂ß ‡∂¥‡∂∏‡∂´‡∑í!*");

    if (quizEnabledGroupJid !== from) {
        return reply("‚ùå *Quiz ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∏‡∑ô‡∂∏ Group ‡∂ë‡∂ö‡∑ö ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂±‡∑ê‡∂≠!*");
    }

    if (quizIntervalId) {
        clearInterval(quizIntervalId);
        quizIntervalId = null;
    }
    quizEnabledGroupJid = null;
    saveQuizState(); 

    reply("üõë *MR D AI Quiz ‡∂ë‡∂ö ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ì.*");
});

// --- .getmrdai Command (‡∂ë‡∑É‡∑ê‡∂´‡∑í‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß) ---
cmd({
    pattern: "getmrdai",
    react: "üí°",
    desc: "Get a new MR D AI quiz question instantly.",
    category: "quiz",
    use: '.getmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply}) => {
    global.currentConn = conn; // connection object ‡∂ë‡∂ö update ‡∂ö‡∂ª‡∂±‡∑ä‡∂±

    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    
    // ‡∂ï‡∂±‡∑ë‡∂∏ ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑ô‡∂ö‡∑î‡∂ß ‡∂∏‡∑ô‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö. Owner check ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ê‡∂≠.

    // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    const sent = await sendQuizQuestion(conn, from);
    if (!sent) {
        reply("üòî *‡∂Ø‡∑ê‡∂±‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.* ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª quiz_questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
    }
});


// Quiz module ‡∂ë‡∂ö export ‡∂ö‡∂ª‡∂±‡∑ä‡∂±, ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± Bot file ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ variables ‡∑É‡∑Ñ functions
module.exports = {
    quizEnabledGroupJid,
    quizIntervalId,
    currentQuizQuestionIndex,
    quizQuestions,
    quizScore,
    loadQuizState, 
    startQuizInterval 
};
