const { cmd } = require('../command');
const fs = require('fs');
const path = require('path');

// Quiz questions JSON file ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
const QUIZ_QUESTIONS_FILE = path.join(__dirname, '../data/quiz_questions.json'); 
let quizQuestions = [];
try {
    quizQuestions = JSON.parse(fs.readFileSync(QUIZ_QUESTIONS_FILE, 'utf8'));
    if (quizQuestions.length === 0) {
        console.warn("quiz_questions.json is empty or contains no valid questions.");
    }
} catch (error) {
    console.error(`Error loading quiz_questions.json from ${QUIZ_QUESTIONS_FILE}:`, error.message);
    quizQuestions = []; 
}

// Quiz answers (explanations) JSON file ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
const QUIZ_ANSWERS_FILE = path.join(__dirname, '../data/quiz_answers.json'); 
let quizExplanations = {}; // { correct_answer_letter: "Explanation text" }
try {
    quizExplanations = JSON.parse(fs.readFileSync(QUIZ_ANSWERS_FILE, 'utf8'));
} catch (error) {
    console.error(`Error loading quiz_answers.json from ${QUIZ_ANSWERS_FILE}:`, error.message);
    quizExplanations = {};
}

// Quiz ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± group JID ‡∂ë‡∂ö ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß
const QUIZ_STATE_FILE = path.join(__dirname, '../data/quiz_state.json'); 
let quizEnabledGroupJid = null;
let quizIntervalId = null;
let currentQuizQuestionIndex = -1; // ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∑ö index ‡∂ë‡∂ö
let activeQuizQuestionJid = null; // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂∫‡∑ê‡∑Ä‡∑ñ JID
let activeQuizQuestionMessageId = null; // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± message ‡∂ë‡∂ö‡∑ö ID ‡∂ë‡∂ö (quoted reply ‡∑É‡∂≥‡∑Ñ‡∑è)
let answeredParticipants = new Set(); // ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑î‡∂±‡∑ä ‡∂Ö‡∂∫‡∂ú‡∑ö JIDs

// Bot start ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß, ‡∂ö‡∂Ω‡∑í‡∂±‡∑ä ‡∂≠‡∑í‡∂∂‡∑ñ state ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
function loadQuizState() {
    try {
        if (fs.existsSync(QUIZ_STATE_FILE)) {
            const state = JSON.parse(fs.readFileSync(QUIZ_STATE_FILE, 'utf8'));
            if (state && state.groupJid) {
                quizEnabledGroupJid = state.groupJid;
                console.log(`Loaded quiz state: Quiz enabled for JID ${quizEnabledGroupJid}`);
            }
        }
    } catch (error) {
        console.error("Error loading quiz_state.json:", error);
    }
}

// Quiz state ‡∂ë‡∂ö save ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
function saveQuizState() {
    try {
        const dataDir = path.dirname(QUIZ_STATE_FILE);
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
        }
        const state = { groupJid: quizEnabledGroupJid };
        fs.writeFileSync(QUIZ_STATE_FILE, JSON.stringify(state, null, 2), 'utf8'); 
        console.log(`Quiz state saved for JID: ${quizEnabledGroupJid}`);
    } catch (error) {
        console.error("Error saving quiz_state.json:", error);
    }
}

// Quiz Interval ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö function ‡∂ë‡∂ö
function startQuizInterval(conn, jid) {
    if (quizIntervalId) {
        clearInterval(quizIntervalId); 
        console.log(`Cleared existing quiz interval for ${jid}`);
    }
    quizIntervalId = setInterval(async () => {
        const activeConn = global.currentConn || global.client; 
        if (activeConn && quizEnabledGroupJid) {
            await sendQuizQuestion(activeConn, quizEnabledGroupJid);
        } else {
            console.warn("No active connection object found or quiz not enabled for any group. Stopping interval.");
            if (quizIntervalId) {
                clearInterval(quizIntervalId);
                quizIntervalId = null;
            }
        }
    }, 60 * 60 * 1000); // 1 hour (60 minutes * 60 seconds * 1000 milliseconds)
    console.log(`Quiz interval started for ${jid}`);
}

// Bot ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß state ‡∂ë‡∂ö load ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
loadQuizState(); 

// --- Helper Functions ---

function getContentType(message) {
    if (message.imageMessage) return 'imageMessage';
    if (message.videoMessage) return 'videoMessage';
    if (message.extendedTextMessage) return 'extendedTextMessage';
    if (message.buttonsResponseMessage) return 'buttonsResponseMessage';
    if (message.listResponseMessage) return 'listResponseMessage';
    if (message.templateButtonReplyMessage) return 'templateButtonReplyMessage';
    if (message.text) return 'text';
    return null;
}

// --- Quiz Commands ---

// ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä text ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∂± function ‡∂ë‡∂ö
async function sendQuizQuestion(conn, jid) {
    if (quizQuestions.length === 0) {
        await conn.sendMessage(jid, { text: "‡∂∏‡∂ß ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª quiz_questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∑É‡∂ö‡∑É‡∑è ‡∂á‡∂≠‡∑í ‡∂∂‡∑Ä‡∂ß ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±." });
        return false; 
    }

    currentQuizQuestionIndex = Math.floor(Math.random() * quizQuestions.length);
    const questionData = quizQuestions[currentQuizQuestionIndex];

    let quizMessage = `*‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫:* ${questionData.question}\n\n`;
    questionData.options.forEach((option, index) => {
        quizMessage += `${String.fromCharCode(65 + index)}. ${option}\n`; // A. Option1, B. Option2, ... E. Option5
    });
    quizMessage += "\n*‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑ö ‡∂Ö‡∂ö‡∑î‡∂ª (A, B, C, D, E) type ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*";

    const sentMsg = await conn.sendMessage(jid, { text: quizMessage });
    
    activeQuizQuestionJid = jid;
    activeQuizQuestionMessageId = sentMsg.key.id; // ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± message ‡∂ë‡∂ö‡∑ö ID ‡∂ë‡∂ö ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    answeredParticipants.clear(); // ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂ë‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑î‡∂±‡∑ä ‡∂Ö‡∂∫‡∂ú‡∑ö ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä clear ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    console.log(`Sent quiz question (Text) to ${jid}. Question index: ${currentQuizQuestionIndex}, Message ID: ${activeQuizQuestionMessageId}`);
    return true; 
}


// .startmrdai Command (‡∂¥‡∑ê‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑ê‡∂∫‡∂ß Quiz ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß) - ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂ï‡∂±‡∑ë‡∂∏ ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ß ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö
cmd({
    pattern: "startmrdai",
    react: "‚úÖ",
    desc: "Start MR D AI quiz in this group (hourly).",
    category: "quiz",
    use: '.startmrdai',
    filename: __filename,
    // isOwner: false, // Owner check ‡∂ë‡∂ö ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠
    // isAdmim: false, // Admin check ‡∂ë‡∂ö ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠ (‡∂∏‡∑ö‡∑Ä‡∑è ‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫‡∂∫‡∑ô‡∂±‡∑ä cmd function ‡∂ë‡∂ö‡∑ö arguments ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∂¥‡∑è‡∂Ω‡∂±‡∂∫ ‡∑Ä‡∑ö)
},
async(conn, mek, m,{from, isGroup, reply}) => { // isOwner remove ‡∂ö‡∂ª ‡∂á‡∂≠
    // Global connection object ‡∂ë‡∂ö set ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    global.currentConn = conn; 

    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    // isOwner / isAdmin check ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠ - ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂ï‡∂±‡∑ë‡∂∏ ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ß ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö

    if (quizEnabledGroupJid === from) {
        return reply("‚úÖ *Quiz ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∏‡∑ô‡∂∏ Group ‡∂ë‡∂ö‡∑ö ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∂∫‡∑í!*");
    }

    quizEnabledGroupJid = from;
    saveQuizState(); 

    // Group metadata ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    let groupName = "‡∂∏‡∑ô‡∂∏ Group ‡∂ë‡∂ö‡∑ö"; 
    try {
        const metadata = await conn.groupMetadata(from);
        if (metadata && metadata.subject) {
            groupName = `"${metadata.subject}" Group ‡∂ë‡∂ö‡∑ö`;
        }
    } catch (e) {
        console.error("Error fetching group metadata in quiz.js (startmrdai):", e.message);
    }

    reply(`‚úÖ *MR D AI Quiz ‡∂ë‡∂ö ${groupName} ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì. ‡∑É‡∑ë‡∂∏ ‡∂¥‡∑ê‡∂∫‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂ë‡∑Ä‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö.*`);
    
    // ‡∑Ä‡∑Ñ‡∑è‡∂∏ ‡∂¥‡∑Ö‡∂∏‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±, ‡∂¥‡∑É‡∑î‡∑Ä interval ‡∂ë‡∂ö ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    await sendQuizQuestion(conn, from);
    startQuizInterval(conn, from); 
});


// .stopmrdai Command (Quiz ‡∂ë‡∂ö ‡∂±‡∑ê‡∑Ä‡∑ê‡∂≠‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß) - ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂ï‡∂±‡∑ë‡∂∏ ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ß ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö
cmd({
    pattern: "stopmrdai",
    react: "‚ùå",
    desc: "Stop MR D AI quiz in this group.",
    category: "quiz",
    use: '.stopmrdai',
    filename: __filename,
    // isOwner: false, // Owner check ‡∂ë‡∂ö ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠
    // isAdmim: false, // Admin check ‡∂ë‡∂ö ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠
},
async(conn, mek, m,{from, isGroup, reply}) => { // isOwner remove ‡∂ö‡∂ª ‡∂á‡∂≠
    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    // isOwner / isAdmin check ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠ - ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂ï‡∂±‡∑ë‡∂∏ ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ß ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö

    if (quizEnabledGroupJid !== from) {
        return reply("‚ùå *Quiz ‡∂ë‡∂ö ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂∏‡∑ô‡∂∏ Group ‡∂ë‡∂ö‡∑ö ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂±‡∑ê‡∂≠!*");
    }

    if (quizIntervalId) {
        clearInterval(quizIntervalId);
        quizIntervalId = null;
    }
    quizEnabledGroupJid = null;
    activeQuizQuestionJid = null;
    activeQuizQuestionMessageId = null;
    answeredParticipants.clear(); 
    saveQuizState(); 

    reply("üõë *MR D AI Quiz ‡∂ë‡∂ö ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ì.*");
});

// .getmrdai Command (‡∂ë‡∑É‡∑ê‡∂´‡∑í‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß) - ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂ï‡∂±‡∑ë‡∂∏ ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ß ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö
cmd({
    pattern: "getmrdai",
    react: "üí°",
    desc: "Get a new MR D AI quiz question instantly.",
    category: "quiz",
    use: '.getmrdai',
    filename: __filename
},
async(conn, mek, m,{from, isGroup, reply}) => { 
    // Global connection object ‡∂ë‡∂ö set ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    global.currentConn = conn;

    if (!isGroup) return reply("‚ùå *‡∂∏‡∑ô‡∂∏ command ‡∂ë‡∂ö Groups ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö!*");
    
    const sent = await sendQuizQuestion(conn, from);
    if (!sent) {
        reply("üòî *‡∂Ø‡∑ê‡∂±‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.* ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª quiz_questions.json ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
    }
});

// --- Baileys messages.upsert event listener ‡∂ë‡∂ö Quiz module ‡∂ë‡∂ö ‡∂≠‡∑î‡∑Ö‡∑í‡∂±‡∑ä‡∂∏ register ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---
// ‡∂∏‡∑ô‡∂∫ `index.js` ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂±‡∑ú‡∂ö‡∂ª, ‡∑É‡∑í‡∂∫‡∂Ω‡∑î incoming messages ‡∑Ä‡∂Ω‡∂ß react ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂± "hack" ‡∂ë‡∂ö‡∂∫‡∑í.
// 'conn' object ‡∂ë‡∂ö global.currentConn ‡∑Ñ‡∑ù global.client ‡∂Ω‡∑ô‡∑É ‡∂≠‡∑í‡∂∂‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫‡∑í.

// Bot ‡∂ë‡∂ö start ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß ‡∂∏‡∑ô‡∂∏ listener ‡∂ë‡∂ö register ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
setTimeout(() => {
    const connInstance = global.currentConn || global.client;
    if (connInstance && !connInstance._quizMessageUpsertHandlerRegistered) {
        console.log("Registering quiz message upsert handler...");
        
        // Ensure that there is an existing 'ev' event emitter from Baileys
        if (connInstance.ev) {
            connInstance.ev.on('messages.upsert', async ({ messages }) => {
                for (let i = 0; i < messages.length; i++) {
                    const mek = messages[i];
                    // Ignore messages from the bot itself or status messages
                    if (mek.key.fromMe || mek.key.remoteJid === 'status@broadcast') continue;

                    const from = mek.key.remoteJid;
                    const isGroup = from && from.endsWith('@g.us');

                    // Only process if it's a group message and quiz is active in this group
                    if (isGroup && quizEnabledGroupJid === from && currentQuizQuestionIndex !== -1) {
                        const sender = mek.key.participant || from; 
                        
                        // Check if the participant has already answered this question
                        if (answeredParticipants.has(sender)) {
                            // console.log(`Participant ${sender} has already answered for this quiz question. Ignoring.`);
                            continue; // Already answered, ignore duplicate
                        }

                        const questionData = quizQuestions[currentQuizQuestionIndex];
                        if (!questionData || typeof questionData.answer_index === 'undefined') {
                            console.error("Invalid question data for current quiz question index:", currentQuizQuestionIndex);
                            continue;
                        }

                        const correctAnswerIndex = questionData.answer_index;
                        const correctAnswerLetter = String.fromCharCode(65 + correctAnswerIndex); // "A", "B", "C", "D", "E" ‡∑Ä‡∑ê‡∂±‡∑í

                        const messageType = getContentType(mek.message);
                        let userAnswerText = '';
                        
                        if (messageType === 'extendedTextMessage') {
                            userAnswerText = mek.message.extendedTextMessage.text;
                        } else if (messageType === 'text') {
                            userAnswerText = mek.message.text;
                        } else {
                            continue; // Ignore non-text messages for quiz answers
                        }
                        
                        // User's answer, trimmed and converted to uppercase for case-insensitive comparison
                        const userAnswer = userAnswerText.trim().toUpperCase();

                        // Get the bot prefix (if available) to avoid responding to commands as answers
                        const botPrefix = global.config?.PREFIX || '!'; 
                        if (userAnswer.startsWith(botPrefix)) {
                            // It's likely a command, ignore for quiz answer
                            continue;
                        }

                        if (userAnswer === correctAnswerLetter) {
                            // Correct Answer
                            const userName = await connInstance.getName(sender);
                            const explanationText = quizExplanations[correctAnswerLetter] || "‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í!";
                            
                            const replyMessage = `üéâ *${userName}*, ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í! ${explanationText}`;

                            // Make sure activeQuizQuestionMessageId and activeQuizQuestionJid are valid before quoting
                            if (activeQuizQuestionMessageId && activeQuizQuestionJid === from) {
                                await connInstance.sendMessage(from, { text: replyMessage }, { 
                                    quoted: { 
                                        key: { remoteJid: from, id: activeQuizQuestionMessageId, fromMe: false }, 
                                        message: { conversation: questionData.question } 
                                    } 
                                });
                            } else {
                                await connInstance.sendMessage(from, { text: replyMessage });
                            }

                            answeredParticipants.add(sender);
                            console.log(`Correct answer from ${userName} (${sender}). Answered: ${userAnswer}, Correct: ${correctAnswerLetter}. Explanation: ${explanationText}`);
                        } else {
                            // Incorrect Answer - Do nothing (as per previous requirement to only reply to correct answers).
                            // If you want to reply to incorrect answers, uncomment and modify below:
                            // const userName = await connInstance.getName(sender);
                            // await connInstance.sendMessage(from, { text: `Sorry ${userName}, that's incorrect.` });
                            // console.log(`Incorrect answer from ${sender}. Answered: ${userAnswer}, Correct: ${correctAnswerLetter}`);
                        }
                    }
                }
            });
            connInstance._quizMessageUpsertHandlerRegistered = true; // Mark as registered to avoid multiple registrations
            
            // Also try to restart interval on bot start if quiz was enabled
            if (quizEnabledGroupJid) {
                console.log(`Attempting to restart quiz interval for ${quizEnabledGroupJid} on bot start.`);
                startQuizInterval(connInstance, quizEnabledGroupJid);
            }
        } else {
            console.error("Connection instance does not have an 'ev' event emitter. Cannot register messages.upsert handler.");
        }

    } else if (connInstance && connInstance._quizMessageUpsertHandlerRegistered) {
        console.log("Quiz message upsert handler already registered.");
    } else {
        console.log("No connection instance (global.currentConn or global.client) found to register quiz upsert handler or it's not ready yet.");
    }
}, 15000); // ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª 15‡∂ö‡∂ß ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±, bot connection stable ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∑É‡∑Ñ global.currentConn / global.client set ‡∑Ä‡∑ì‡∂∏‡∂ß.

// Quiz module ‡∂ë‡∂ö export ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
module.exports = {
    quizEnabledGroupJid,
    quizIntervalId,
    currentQuizQuestionIndex,
    quizQuestions,
    activeQuizQuestionJid,
    activeQuizQuestionMessageId,
    loadQuizState, 
    startQuizInterval,
};
