const { cmd } = require('../command');
const fs = require('fs');
const path = require('path');
const config = require('../config');

// Active groups stored in a file
const GROUPS_FILE = path.join(__dirname, '../active_wd_groups.json');
let activeGroups = {};

// Load active groups from file if exists
if (fs.existsSync(GROUPS_FILE)) {
    activeGroups = JSON.parse(fs.readFileSync(GROUPS_FILE));
}

// Facts with images
const knowledgeFacts = [
    {
        text: "‡∂ã‡∂≠‡∑î‡∂ª‡∑î ‡∂©‡∑ê‡∂ö‡∑ú‡∂ß‡∑è ‡∂ö‡∂≥‡∑î‡∑Ä‡∑ê‡∂ß‡∑í‡∂∫ (Mount Rushmore) ‡∂∫‡∂±‡∑î ‡∂á‡∂∏‡∂ª‡∑í‡∂ö‡∑è‡∑Ä‡∑ö ‡∂¢‡∂±‡∑è‡∂∞‡∑í‡∂¥‡∂≠‡∑í ‡∑Ä‡∑í‡∂ª‡∑î‡∑Ä‡∂±‡∑ä‡∂ú‡∑ö ‡∂∏‡∑ñ‡∂ª‡∑ä‡∂≠‡∑í ‡∑É‡∑í‡∂≠‡∑î‡∑Ä‡∂∏‡∂ö‡∑í.",
        image: "https://upload.wikimedia.org/wikipedia/commons/6/6d/Mount_Rushmore_National_Memorial.jpg"
    },
    {
        text: "‡∂±‡∑í‡∂∫‡∑è‡∂ú‡∂ª‡∑è ‡∂Ø‡∑í‡∂∫‡∂á‡∂Ω‡∑í ‡∂Ω‡∑ù‡∂ö‡∂∫‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂ö‡∂ß‡∂∏ ‡∂Ø‡∑í‡∂∫‡∂á‡∂Ω‡∑í ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ä‡∑ö.",
        image: "https://upload.wikimedia.org/wikipedia/commons/1/11/Niagara_Falls_from_Canada_at_sunset.jpg"
    },
    {
        text: "‡∂Ö‡∂∏‡∑É‡∑ù‡∂±‡∑í‡∂∫‡∑è‡∑Ä ‡∂∫‡∂±‡∑î ‡∂Ω‡∑ù‡∂ö‡∂∫‡∑ö ‡∑Ä‡∑í‡∑Å‡∑è‡∂Ω‡∂≠‡∂∏ ‡∑Ä‡∂±‡∑è‡∂±‡∑ä‡∂≠‡∂ª‡∂∫‡∂∫‡∑í.",
        image: "https://upload.wikimedia.org/wikipedia/commons/e/e0/Amazon_rainforest.jpg"
    },
    {
        text: "‡∂ú‡∑ä‚Äç‡∂ª‡∑Ñ ‡∂∏‡∑è‡∂Ω‡∑è‡∑Ä‡∑ö ‡∑Ä‡∑í‡∑Å‡∑è‡∂Ω‡∂≠‡∂∏ ‡∂ö‡∂≥‡∑î ‡∂∫‡∂±‡∑î ‡∂∏‡∑è‡∂ª‡∑ä‡∑É‡∑ä ‡∂ú‡∑ä‚Äç‡∂ª‡∑Ñ‡∂∫‡∑ö Olympus Mons ‡∂ö‡∂≥‡∑î ‡∂∂‡∑Ä‡∂∫‡∑í.",
        image: "https://upload.wikimedia.org/wikipedia/commons/4/46/Olympus_Mons.jpg"
    },
    {
        text: "‡∂Ö‡∂±‡∑ä‡∂ß‡∑è‡∂ª‡∑ä‡∂ö‡∑ä‡∂ß‡∑í‡∂ö‡∑è‡∑Ä ‡∂∫‡∂±‡∑î ‡∂Ω‡∑ù‡∂ö‡∂∫‡∑ö ‡∑É‡∑î‡∂Ø‡∑î‡∂∏ ‡∑Ñ‡∑è ‡∑Å‡∑ì‡∂≠‡∂∏ ‡∂∑‡∑ñ‡∂∏‡∑í‡∂∫‡∂∫‡∑í.",
        image: "https://upload.wikimedia.org/wikipedia/commons/5/58/Antarctica_iceberg.jpg"
    },
];

function getRandomKnowledge() {
    return knowledgeFacts[Math.floor(Math.random() * knowledgeFacts.length)];
}

function saveActiveGroups() {
    fs.writeFileSync(GROUPS_FILE, JSON.stringify(activeGroups, null, 2));
}

async function postKnowledge(conn, groupId) {
    const fact = getRandomKnowledge();
    try {
        await conn.sendMessage(groupId, {
            image: { url: fact.image },
            caption: `*üåç ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏!*\n\n${fact.text}\n\n> Powered by QUEEN-SADU-MD & D-XTRO-MD`
        });
    } catch (e) {
        console.error(`Failed to send knowledge fact: ${e.message}`);
    }
}

cmd({
    pattern: "startwd",
    desc: "Activate World Knowledge facts updates",
    isGroup: true,
    react: "üåç",
    filename: __filename
}, async (conn, mek, m, { from, isGroup, participants }) => {
    try {
        if (isGroup) {
            const isAdmin = participants.some(p => p.id === mek.sender && p.admin);
            const isBotOwner = mek.sender === conn.user.jid;

            if (isAdmin || isBotOwner) {
                if (!activeGroups[from]) {
                    activeGroups[from] = true;
                    saveActiveGroups();

                    await conn.sendMessage(from, { text: "üåç Auto World Knowledge Activated!" });

                    if (!activeGroups['interval']) {
                        activeGroups['interval'] = setInterval(async () => {
                            for (const groupId in activeGroups) {
                                if (activeGroups[groupId] && groupId !== 'interval') {
                                    await postKnowledge(conn, groupId);
                                }
                            }
                        }, 2 * 60 * 60 * 1000); // every 2 hours
                    }
                } else {
                    await conn.sendMessage(from, { text: "‚úÖ World Knowledge updates already activated." });
                }
            } else {
                await conn.sendMessage(from, { text: "üö´ Only group admins or bot owner can use this command." });
            }
        } else {
            await conn.sendMessage(from, { text: "This command can only be used in groups." });
        }
    } catch (e) {
        console.error(`Error in startwd command: ${e.message}`);
        await conn.sendMessage(from, { text: "Failed to activate World Knowledge service." });
    }
});

cmd({
    pattern: "stopwd",
    desc: "Disable World Knowledge updates",
    isGroup: true,
    react: "üõë",
    filename: __filename
}, async (conn, mek, m, { from, isGroup, participants }) => {
    try {
        if (isGroup) {
            const isAdmin = participants.some(p => p.id === mek.sender && p.admin);
            const isBotOwner = mek.sender === conn.user.jid;

            if (isAdmin || isBotOwner) {
                if (activeGroups[from]) {
                    delete activeGroups[from];
                    saveActiveGroups();
                    await conn.sendMessage(from, { text: "üõë World Knowledge updates disabled in this group." });

                    if (Object.keys(activeGroups).length === 1 && activeGroups['interval']) {
                        clearInterval(activeGroups['interval']);
                        delete activeGroups['interval'];
                    }
                } else {
                    await conn.sendMessage(from, { text: "‚ö†Ô∏è World Knowledge updates not active in this group." });
                }
            } else {
                await conn.sendMessage(from, { text: "üö´ Only group admins or bot owner can use this command." });
            }
        } else {
            await conn.sendMessage(from, { text: "This command can only be used in groups." });
        }
    } catch (e) {
        console.error(`Error in stopwd command: ${e.message}`);
        await conn.sendMessage(from, { text: "Failed to deactivate World Knowledge service." });
    }
});
