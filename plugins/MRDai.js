// ‡∂∏‡∑ô‡∂∏ ‡∂¥‡∑ä‡∂Ω‡∂ú‡∑í‡∂±‡∂∫ WhatsApp Bot ‡∑Ä‡∑í‡∂∞‡∑è‡∂± ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∑Ä‡∑ö.
// This plugin is used for WhatsApp Bot commands.
const { cmd } = require('../command');
const axios = require('axios'); // API calls ‡∑É‡∂≥‡∑Ñ‡∑è axios ‡∂∏‡∑ú‡∂©‡∑í‡∂∫‡∑î‡∂Ω‡∂∫ ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∑Ä‡∑ö. // axios module is required for API calls.

// Supun-MD API ‡∑Ñ‡∂ª‡∑Ñ‡∑è OpenAI ‡∑É‡∂∏‡∂ü ‡∂ö‡∂≠‡∑è‡∂∂‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂±‡∑Ä ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫.
// New command for chatting with OpenAI via Supun-MD API.
cmd({
    pattern: "ai", // ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∑ö ‡∂±‡∂∏. // Command name.
    alias: ["mrd", "mrdai"], // ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥ ‡∂±‡∂∏‡∑ä. // Alternative names for the command.
    desc: "Chat with OpenAI model using MRD-MD API", // ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫. // Description of the command.
    category: "ai", // ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂Ö‡∂∫‡∂≠‡∑ä ‡∑Ä‡∂± ‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫. // Category the command belongs to.
    react: "üß†", // ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂± emoji. // Emoji to show when the command is executed.
    filename: __filename // ‡∑Ä‡∂≠‡∑ä‡∂∏‡∂±‡∑ä ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∑ö ‡∂±‡∂∏. // Current file name.
},
async (conn, mek, m, { from, args, q, reply }) => {
    try {
        // ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì ‡∂á‡∂≠‡∑ä‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
        // Check if the user has provided a message.
        if (!q) {
            await conn.sendMessage(from, { react: { text: "‚ùå", key: mek.key } });
            return reply("‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª AI ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±.\n‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´: `.mrdai Hello`");
        }

        // OpenAI API URL ‡∂ë‡∂ö ‡∑É‡∂ö‡∑É‡∂±‡∑ä‡∂±.
        // Corrected: Removed 'hi' from the query string.
        // Set the OpenAI API URL.
        const apiUrl = `https://supun-md-api-xmjh.vercel.app/api/ai?q=${encodeURIComponent(q)}`;

        // API ‡∑Ä‡∑ô‡∂≠ GET ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±.
        // Send a GET request to the API.
        const { data } = await axios.get(apiUrl);

        // API ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª‡∂∫ ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
        // Check if the API response is valid and extract the AI response.
        // The Vercel API response structure is data.success and data.geminiResponse.data
        if (!data || !data.success || !data.geminiResponse || !data.geminiResponse.data) {
            await conn.sendMessage(from, { react: { text: "‚ùå", key: mek.key } });
            return reply("MRD AI ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª ‡∂Ø‡∑ê‡∂ö‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂Ö‡∂¥‡∑ú‡∑Ñ‡∑ú‡∑É‡∂≠‡∑ä ‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }

        // AI ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª‡∂∫ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è‡∂ß ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±.
        // Send the AI response to the user.
        const aiResponse = data.geminiResponse.data;
        await reply(`üß† *MRD AI ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª‡∂∫:*\n\n${aiResponse}`);
        await conn.sendMessage(from, { react: { text: "‚úÖ", key: mek.key } });

    } catch (e) {
        // ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∑Ä‡∑Ñ‡∑ú‡∂≠‡∑ä ‡∂ë‡∂∫ ‡∂ö‡∑ú‡∂±‡∑ä‡∑É‡∑ù‡∂Ω‡∂∫‡∑ö ‡∑É‡∂ß‡∑Ñ‡∂±‡∑ä ‡∂ö‡∂ª ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è‡∂ß ‡∂Ø‡∑ù‡∑Ç ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±.
        // If an error occurs, log it to the console and send an error message to the user.
        console.error("MRD AI ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:", e);
        await conn.sendMessage(from, { react: { text: "‚ùå", key: mek.key } });
        reply("MRD AI ‡∑É‡∂∏‡∂ü ‡∑É‡∂±‡∑ä‡∂±‡∑í‡∑Ä‡∑ö‡∂Ø‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª API ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫ ‡∑É‡∑Ñ CORS ‡∑É‡∑ê‡∂ö‡∑É‡∑î‡∂∏‡∑ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
    }
});
